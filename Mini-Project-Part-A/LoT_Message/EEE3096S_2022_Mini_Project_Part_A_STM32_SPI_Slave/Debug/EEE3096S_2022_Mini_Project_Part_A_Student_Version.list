
EEE3096S_2022_Mini_Project_Part_A_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a4  080030a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030a4  080030a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030a4  080030a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030a8  080030a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c0  2000000c  080030b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  080030b8  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a299  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000187e  00000000  00000000  0002a2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  0002bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  0002c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011184  00000000  00000000  0002cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aab8  00000000  00000000  0003dcdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066ff6  00000000  00000000  00048794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af78a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca8  00000000  00000000  000af7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003054 	.word	0x08003054

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003054 	.word	0x08003054

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fac0 	bl	80007a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f820 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f90a 	bl	8000444 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f8ea 	bl	8000408 <MX_DMA_Init>
  MX_SPI1_Init();
 8000234:	f000 f87c 	bl	8000330 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000238:	f000 f8b6 	bl	80003a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Receive SPI Data (Blocking Mode) Polling
  HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 5000);
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <main+0x38>)
 800023e:	4a07      	ldr	r2, [pc, #28]	; (800025c <main+0x3c>)
 8000240:	4907      	ldr	r1, [pc, #28]	; (8000260 <main+0x40>)
 8000242:	4808      	ldr	r0, [pc, #32]	; (8000264 <main+0x44>)
 8000244:	f001 fcce 	bl	8001be4 <HAL_SPI_Receive>
  HAL_UART_Transmit(&huart1, RX_Data, sizeof(RX_Data), 5000);
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <main+0x38>)
 800024a:	4a04      	ldr	r2, [pc, #16]	; (800025c <main+0x3c>)
 800024c:	4904      	ldr	r1, [pc, #16]	; (8000260 <main+0x40>)
 800024e:	4806      	ldr	r0, [pc, #24]	; (8000268 <main+0x48>)
 8000250:	f002 fb2a 	bl	80028a8 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000254:	e7fe      	b.n	8000254 <main+0x34>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	00001388 	.word	0x00001388
 800025c:	00000674 	.word	0x00000674
 8000260:	20000154 	.word	0x20000154
 8000264:	20000028 	.word	0x20000028
 8000268:	200000d0 	.word	0x200000d0

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b097      	sub	sp, #92	; 0x5c
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	2428      	movs	r4, #40	; 0x28
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	2330      	movs	r3, #48	; 0x30
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f002 fee1 	bl	8003044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000282:	2318      	movs	r3, #24
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	0018      	movs	r0, r3
 8000288:	2310      	movs	r3, #16
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f002 fed9 	bl	8003044 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	0018      	movs	r0, r3
 8000296:	2314      	movs	r3, #20
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f002 fed2 	bl	8003044 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a0:	0021      	movs	r1, r4
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2202      	movs	r2, #2
 80002a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2201      	movs	r2, #1
 80002ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2210      	movs	r2, #16
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2202      	movs	r2, #2
 80002b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2200      	movs	r2, #0
 80002be:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	22a0      	movs	r2, #160	; 0xa0
 80002c4:	0392      	lsls	r2, r2, #14
 80002c6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fe85 	bl	8000fe0 <HAL_RCC_OscConfig>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002da:	f000 f90f 	bl	80004fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	2118      	movs	r1, #24
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2207      	movs	r2, #7
 80002e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2202      	movs	r2, #2
 80002ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2101      	movs	r1, #1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 f989 	bl	8001614 <HAL_RCC_ClockConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000306:	f000 f8f9 	bl	80004fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2201      	movs	r2, #1
 800030e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	0018      	movs	r0, r3
 800031a:	f001 facd 	bl	80018b8 <HAL_RCCEx_PeriphCLKConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000322:	f000 f8eb 	bl	80004fc <Error_Handler>
  }
}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b017      	add	sp, #92	; 0x5c
 800032c:	bd90      	pop	{r4, r7, pc}
	...

08000330 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000336:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <MX_SPI1_Init+0x74>)
 8000338:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <MX_SPI1_Init+0x70>)
 800033c:	2200      	movs	r2, #0
 800033e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000342:	2280      	movs	r2, #128	; 0x80
 8000344:	00d2      	lsls	r2, r2, #3
 8000346:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_SPI1_Init+0x70>)
 800034a:	22e0      	movs	r2, #224	; 0xe0
 800034c:	00d2      	lsls	r2, r2, #3
 800034e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800035c:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <MX_SPI1_Init+0x70>)
 800035e:	2280      	movs	r2, #128	; 0x80
 8000360:	0092      	lsls	r2, r2, #2
 8000362:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000366:	2200      	movs	r2, #0
 8000368:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <MX_SPI1_Init+0x70>)
 800036c:	2200      	movs	r2, #0
 800036e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000372:	2200      	movs	r2, #0
 8000374:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000378:	2207      	movs	r2, #7
 800037a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800037c:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_SPI1_Init+0x70>)
 800037e:	2200      	movs	r2, #0
 8000380:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <MX_SPI1_Init+0x70>)
 8000384:	2200      	movs	r2, #0
 8000386:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000388:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <MX_SPI1_Init+0x70>)
 800038a:	0018      	movs	r0, r3
 800038c:	f001 fb72 	bl	8001a74 <HAL_SPI_Init>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000394:	f000 f8b2 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	20000028 	.word	0x20000028
 80003a4:	40013000 	.word	0x40013000

080003a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <MX_USART1_UART_Init+0x5c>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003b4:	22e1      	movs	r2, #225	; 0xe1
 80003b6:	0252      	lsls	r2, r2, #9
 80003b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f002 fa07 	bl	8002800 <HAL_UART_Init>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003f6:	f000 f881 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	200000d0 	.word	0x200000d0
 8000404:	40013800 	.word	0x40013800

08000408 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_DMA_Init+0x38>)
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_DMA_Init+0x38>)
 8000414:	2101      	movs	r1, #1
 8000416:	430a      	orrs	r2, r1
 8000418:	615a      	str	r2, [r3, #20]
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_DMA_Init+0x38>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	2201      	movs	r2, #1
 8000420:	4013      	ands	r3, r2
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	2100      	movs	r1, #0
 800042a:	200a      	movs	r0, #10
 800042c:	f000 facc 	bl	80009c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000430:	200a      	movs	r0, #10
 8000432:	f000 fade 	bl	80009f2 <HAL_NVIC_EnableIRQ>

}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	40021000 	.word	0x40021000

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b089      	sub	sp, #36	; 0x24
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	240c      	movs	r4, #12
 800044c:	193b      	adds	r3, r7, r4
 800044e:	0018      	movs	r0, r3
 8000450:	2314      	movs	r3, #20
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f002 fdf5 	bl	8003044 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	4b26      	ldr	r3, [pc, #152]	; (80004f4 <MX_GPIO_Init+0xb0>)
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <MX_GPIO_Init+0xb0>)
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	0289      	lsls	r1, r1, #10
 8000464:	430a      	orrs	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <MX_GPIO_Init+0xb0>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	029b      	lsls	r3, r3, #10
 8000470:	4013      	ands	r3, r2
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <MX_GPIO_Init+0xb0>)
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <MX_GPIO_Init+0xb0>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0309      	lsls	r1, r1, #12
 8000480:	430a      	orrs	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <MX_GPIO_Init+0xb0>)
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	031b      	lsls	r3, r3, #12
 800048c:	4013      	ands	r3, r2
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000492:	23c0      	movs	r3, #192	; 0xc0
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	4818      	ldr	r0, [pc, #96]	; (80004f8 <MX_GPIO_Init+0xb4>)
 8000498:	2200      	movs	r2, #0
 800049a:	0019      	movs	r1, r3
 800049c:	f000 fd82 	bl	8000fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2201      	movs	r2, #1
 80004a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	2290      	movs	r2, #144	; 0x90
 80004aa:	0352      	lsls	r2, r2, #13
 80004ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004b4:	193a      	adds	r2, r7, r4
 80004b6:	2390      	movs	r3, #144	; 0x90
 80004b8:	05db      	lsls	r3, r3, #23
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fc01 	bl	8000cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80004c2:	0021      	movs	r1, r4
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	22c0      	movs	r2, #192	; 0xc0
 80004c8:	0092      	lsls	r2, r2, #2
 80004ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2201      	movs	r2, #1
 80004d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <MX_GPIO_Init+0xb4>)
 80004e2:	0019      	movs	r1, r3
 80004e4:	0010      	movs	r0, r2
 80004e6:	f000 fbed 	bl	8000cc4 <HAL_GPIO_Init>

}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b009      	add	sp, #36	; 0x24
 80004f0:	bd90      	pop	{r4, r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	40021000 	.word	0x40021000
 80004f8:	48000800 	.word	0x48000800

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
}
 8000502:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000504:	e7fe      	b.n	8000504 <Error_Handler+0x8>
	...

08000508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <HAL_MspInit+0x44>)
 8000510:	699a      	ldr	r2, [r3, #24]
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <HAL_MspInit+0x44>)
 8000514:	2101      	movs	r1, #1
 8000516:	430a      	orrs	r2, r1
 8000518:	619a      	str	r2, [r3, #24]
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_MspInit+0x44>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	2201      	movs	r2, #1
 8000520:	4013      	ands	r3, r2
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <HAL_MspInit+0x44>)
 8000528:	69da      	ldr	r2, [r3, #28]
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <HAL_MspInit+0x44>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0549      	lsls	r1, r1, #21
 8000530:	430a      	orrs	r2, r1
 8000532:	61da      	str	r2, [r3, #28]
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <HAL_MspInit+0x44>)
 8000536:	69da      	ldr	r2, [r3, #28]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	055b      	lsls	r3, r3, #21
 800053c:	4013      	ands	r3, r2
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b002      	add	sp, #8
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08b      	sub	sp, #44	; 0x2c
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	2414      	movs	r4, #20
 800055a:	193b      	adds	r3, r7, r4
 800055c:	0018      	movs	r0, r3
 800055e:	2314      	movs	r3, #20
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f002 fd6e 	bl	8003044 <memset>
  if(hspi->Instance==SPI1)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a33      	ldr	r2, [pc, #204]	; (800063c <HAL_SPI_MspInit+0xec>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d160      	bne.n	8000634 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000572:	4b33      	ldr	r3, [pc, #204]	; (8000640 <HAL_SPI_MspInit+0xf0>)
 8000574:	699a      	ldr	r2, [r3, #24]
 8000576:	4b32      	ldr	r3, [pc, #200]	; (8000640 <HAL_SPI_MspInit+0xf0>)
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	0149      	lsls	r1, r1, #5
 800057c:	430a      	orrs	r2, r1
 800057e:	619a      	str	r2, [r3, #24]
 8000580:	4b2f      	ldr	r3, [pc, #188]	; (8000640 <HAL_SPI_MspInit+0xf0>)
 8000582:	699a      	ldr	r2, [r3, #24]
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	015b      	lsls	r3, r3, #5
 8000588:	4013      	ands	r3, r2
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b2c      	ldr	r3, [pc, #176]	; (8000640 <HAL_SPI_MspInit+0xf0>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <HAL_SPI_MspInit+0xf0>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	0289      	lsls	r1, r1, #10
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <HAL_SPI_MspInit+0xf0>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	029b      	lsls	r3, r3, #10
 80005a4:	4013      	ands	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80005aa:	0021      	movs	r1, r4
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	22a0      	movs	r2, #160	; 0xa0
 80005b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2202      	movs	r2, #2
 80005b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2203      	movs	r2, #3
 80005c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	187a      	adds	r2, r7, r1
 80005cc:	2390      	movs	r3, #144	; 0x90
 80005ce:	05db      	lsls	r3, r3, #23
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fb76 	bl	8000cc4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <HAL_SPI_MspInit+0xf4>)
 80005da:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <HAL_SPI_MspInit+0xf8>)
 80005dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <HAL_SPI_MspInit+0xf4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <HAL_SPI_MspInit+0xf4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <HAL_SPI_MspInit+0xf4>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <HAL_SPI_MspInit+0xf4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <HAL_SPI_MspInit+0xf4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_SPI_MspInit+0xf4>)
 80005fe:	2220      	movs	r2, #32
 8000600:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <HAL_SPI_MspInit+0xf4>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_SPI_MspInit+0xf4>)
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fa0e 	bl	8000a2c <HAL_DMA_Init>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 8000614:	f7ff ff72 	bl	80004fc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_SPI_MspInit+0xf4>)
 800061c:	659a      	str	r2, [r3, #88]	; 0x58
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_SPI_MspInit+0xf4>)
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	2019      	movs	r0, #25
 800062a:	f000 f9cd 	bl	80009c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800062e:	2019      	movs	r0, #25
 8000630:	f000 f9df 	bl	80009f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b00b      	add	sp, #44	; 0x2c
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	40013000 	.word	0x40013000
 8000640:	40021000 	.word	0x40021000
 8000644:	2000008c 	.word	0x2000008c
 8000648:	4002001c 	.word	0x4002001c

0800064c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b08b      	sub	sp, #44	; 0x2c
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	2414      	movs	r4, #20
 8000656:	193b      	adds	r3, r7, r4
 8000658:	0018      	movs	r0, r3
 800065a:	2314      	movs	r3, #20
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f002 fcf0 	bl	8003044 <memset>
  if(huart->Instance==USART1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <HAL_UART_MspInit+0x94>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d133      	bne.n	80006d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <HAL_UART_MspInit+0x98>)
 8000670:	699a      	ldr	r2, [r3, #24]
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_UART_MspInit+0x98>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	01c9      	lsls	r1, r1, #7
 8000678:	430a      	orrs	r2, r1
 800067a:	619a      	str	r2, [r3, #24]
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_UART_MspInit+0x98>)
 800067e:	699a      	ldr	r2, [r3, #24]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	01db      	lsls	r3, r3, #7
 8000684:	4013      	ands	r3, r2
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <HAL_UART_MspInit+0x98>)
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_UART_MspInit+0x98>)
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0289      	lsls	r1, r1, #10
 8000694:	430a      	orrs	r2, r1
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_UART_MspInit+0x98>)
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	029b      	lsls	r3, r3, #10
 80006a0:	4013      	ands	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	22c0      	movs	r2, #192	; 0xc0
 80006aa:	00d2      	lsls	r2, r2, #3
 80006ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	0021      	movs	r1, r4
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2202      	movs	r2, #2
 80006b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2203      	movs	r2, #3
 80006c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2201      	movs	r2, #1
 80006c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	187a      	adds	r2, r7, r1
 80006ca:	2390      	movs	r3, #144	; 0x90
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	0011      	movs	r1, r2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 faf7 	bl	8000cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b00b      	add	sp, #44	; 0x2c
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	40013800 	.word	0x40013800
 80006e4:	40021000 	.word	0x40021000

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <NMI_Handler+0x4>

080006ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070c:	f000 f894 	bl	8000838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <DMA1_Channel2_3_IRQHandler+0x14>)
 800071e:	0018      	movs	r0, r3
 8000720:	f000 fa11 	bl	8000b46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	2000008c 	.word	0x2000008c

08000730 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <SPI1_IRQHandler+0x14>)
 8000736:	0018      	movs	r0, r3
 8000738:	f001 fd72 	bl	8002220 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000028 	.word	0x20000028

08000748 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000756:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <LoopForever+0x6>)
  ldr r1, =_edata
 800075a:	490e      	ldr	r1, [pc, #56]	; (8000794 <LoopForever+0xa>)
  ldr r2, =_sidata
 800075c:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <LoopForever+0xe>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000760:	e002      	b.n	8000768 <LoopCopyDataInit>

08000762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000766:	3304      	adds	r3, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800076c:	d3f9      	bcc.n	8000762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000770:	4c0b      	ldr	r4, [pc, #44]	; (80007a0 <LoopForever+0x16>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000774:	e001      	b.n	800077a <LoopFillZerobss>

08000776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000778:	3204      	adds	r2, #4

0800077a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800077c:	d3fb      	bcc.n	8000776 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800077e:	f7ff ffe3 	bl	8000748 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000782:	f002 fc3b 	bl	8002ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000786:	f7ff fd4b 	bl	8000220 <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   r0, =_estack
 800078c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000798:	080030ac 	.word	0x080030ac
  ldr r2, =_sbss
 800079c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007a0:	200007cc 	.word	0x200007cc

080007a4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_COMP_IRQHandler>
	...

080007a8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <HAL_Init+0x24>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_Init+0x24>)
 80007b2:	2110      	movs	r1, #16
 80007b4:	430a      	orrs	r2, r1
 80007b6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 f809 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007be:	f7ff fea3 	bl	8000508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	0018      	movs	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40022000 	.word	0x40022000

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <HAL_InitTick+0x5c>)
 80007da:	681c      	ldr	r4, [r3, #0]
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_InitTick+0x60>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	0019      	movs	r1, r3
 80007e2:	23fa      	movs	r3, #250	; 0xfa
 80007e4:	0098      	lsls	r0, r3, #2
 80007e6:	f7ff fc8f 	bl	8000108 <__udivsi3>
 80007ea:	0003      	movs	r3, r0
 80007ec:	0019      	movs	r1, r3
 80007ee:	0020      	movs	r0, r4
 80007f0:	f7ff fc8a 	bl	8000108 <__udivsi3>
 80007f4:	0003      	movs	r3, r0
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 f90b 	bl	8000a12 <HAL_SYSTICK_Config>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	e00f      	b.n	8000824 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b03      	cmp	r3, #3
 8000808:	d80b      	bhi.n	8000822 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	2301      	movs	r3, #1
 800080e:	425b      	negs	r3, r3
 8000810:	2200      	movs	r2, #0
 8000812:	0018      	movs	r0, r3
 8000814:	f000 f8d8 	bl	80009c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_InitTick+0x64>)
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	e000      	b.n	8000824 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b003      	add	sp, #12
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	20000000 	.word	0x20000000
 8000830:	20000008 	.word	0x20000008
 8000834:	20000004 	.word	0x20000004

08000838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_IncTick+0x1c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	001a      	movs	r2, r3
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x20>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	18d2      	adds	r2, r2, r3
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <HAL_IncTick+0x20>)
 800084a:	601a      	str	r2, [r3, #0]
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20000008 	.word	0x20000008
 8000858:	200007c8 	.word	0x200007c8

0800085c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;
 8000860:	4b02      	ldr	r3, [pc, #8]	; (800086c <HAL_GetTick+0x10>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	200007c8 	.word	0x200007c8

08000870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	0002      	movs	r2, r0
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b7f      	cmp	r3, #127	; 0x7f
 8000882:	d809      	bhi.n	8000898 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	001a      	movs	r2, r3
 800088a:	231f      	movs	r3, #31
 800088c:	401a      	ands	r2, r3
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <__NVIC_EnableIRQ+0x30>)
 8000890:	2101      	movs	r1, #1
 8000892:	4091      	lsls	r1, r2
 8000894:	000a      	movs	r2, r1
 8000896:	601a      	str	r2, [r3, #0]
  }
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	e000e100 	.word	0xe000e100

080008a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	0002      	movs	r2, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b7f      	cmp	r3, #127	; 0x7f
 80008b8:	d828      	bhi.n	800090c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ba:	4a2f      	ldr	r2, [pc, #188]	; (8000978 <__NVIC_SetPriority+0xd4>)
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	089b      	lsrs	r3, r3, #2
 80008c4:	33c0      	adds	r3, #192	; 0xc0
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	589b      	ldr	r3, [r3, r2]
 80008ca:	1dfa      	adds	r2, r7, #7
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	0011      	movs	r1, r2
 80008d0:	2203      	movs	r2, #3
 80008d2:	400a      	ands	r2, r1
 80008d4:	00d2      	lsls	r2, r2, #3
 80008d6:	21ff      	movs	r1, #255	; 0xff
 80008d8:	4091      	lsls	r1, r2
 80008da:	000a      	movs	r2, r1
 80008dc:	43d2      	mvns	r2, r2
 80008de:	401a      	ands	r2, r3
 80008e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	019b      	lsls	r3, r3, #6
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	401a      	ands	r2, r3
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0018      	movs	r0, r3
 80008f0:	2303      	movs	r3, #3
 80008f2:	4003      	ands	r3, r0
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	481f      	ldr	r0, [pc, #124]	; (8000978 <__NVIC_SetPriority+0xd4>)
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	089b      	lsrs	r3, r3, #2
 8000902:	430a      	orrs	r2, r1
 8000904:	33c0      	adds	r3, #192	; 0xc0
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800090a:	e031      	b.n	8000970 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <__NVIC_SetPriority+0xd8>)
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	0019      	movs	r1, r3
 8000914:	230f      	movs	r3, #15
 8000916:	400b      	ands	r3, r1
 8000918:	3b08      	subs	r3, #8
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	3306      	adds	r3, #6
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	18d3      	adds	r3, r2, r3
 8000922:	3304      	adds	r3, #4
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	1dfa      	adds	r2, r7, #7
 8000928:	7812      	ldrb	r2, [r2, #0]
 800092a:	0011      	movs	r1, r2
 800092c:	2203      	movs	r2, #3
 800092e:	400a      	ands	r2, r1
 8000930:	00d2      	lsls	r2, r2, #3
 8000932:	21ff      	movs	r1, #255	; 0xff
 8000934:	4091      	lsls	r1, r2
 8000936:	000a      	movs	r2, r1
 8000938:	43d2      	mvns	r2, r2
 800093a:	401a      	ands	r2, r3
 800093c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	019b      	lsls	r3, r3, #6
 8000942:	22ff      	movs	r2, #255	; 0xff
 8000944:	401a      	ands	r2, r3
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	0018      	movs	r0, r3
 800094c:	2303      	movs	r3, #3
 800094e:	4003      	ands	r3, r0
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <__NVIC_SetPriority+0xd8>)
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	001c      	movs	r4, r3
 800095c:	230f      	movs	r3, #15
 800095e:	4023      	ands	r3, r4
 8000960:	3b08      	subs	r3, #8
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	430a      	orrs	r2, r1
 8000966:	3306      	adds	r3, #6
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	18c3      	adds	r3, r0, r3
 800096c:	3304      	adds	r3, #4
 800096e:	601a      	str	r2, [r3, #0]
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b003      	add	sp, #12
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	1e5a      	subs	r2, r3, #1
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	045b      	lsls	r3, r3, #17
 8000990:	429a      	cmp	r2, r3
 8000992:	d301      	bcc.n	8000998 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000994:	2301      	movs	r3, #1
 8000996:	e010      	b.n	80009ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <SysTick_Config+0x44>)
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	3a01      	subs	r2, #1
 800099e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a0:	2301      	movs	r3, #1
 80009a2:	425b      	negs	r3, r3
 80009a4:	2103      	movs	r1, #3
 80009a6:	0018      	movs	r0, r3
 80009a8:	f7ff ff7c 	bl	80008a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <SysTick_Config+0x44>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <SysTick_Config+0x44>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	0018      	movs	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	e000e010 	.word	0xe000e010

080009c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	210f      	movs	r1, #15
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	1c02      	adds	r2, r0, #0
 80009d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ff5d 	bl	80008a4 <__NVIC_SetPriority>
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b004      	add	sp, #16
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	0002      	movs	r2, r0
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff ff33 	bl	8000870 <__NVIC_EnableIRQ>
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff ffaf 	bl	8000980 <SysTick_Config>
 8000a22:	0003      	movs	r3, r0
}
 8000a24:	0018      	movs	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d101      	bne.n	8000a42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e036      	b.n	8000ab0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2221      	movs	r2, #33	; 0x21
 8000a46:	2102      	movs	r1, #2
 8000a48:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <HAL_DMA_Init+0x8c>)
 8000a56:	4013      	ands	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 f8fa 	bl	8000c8c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2221      	movs	r2, #33	; 0x21
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	2100      	movs	r1, #0
 8000aac:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
}  
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b004      	add	sp, #16
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	ffffc00f 	.word	0xffffc00f

08000abc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ac4:	210f      	movs	r1, #15
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2221      	movs	r2, #33	; 0x21
 8000ad0:	5c9b      	ldrb	r3, [r3, r2]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d006      	beq.n	8000ae6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2204      	movs	r2, #4
 8000adc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	e028      	b.n	8000b38 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	210e      	movs	r1, #14
 8000af2:	438a      	bics	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2101      	movs	r1, #1
 8000b02:	438a      	bics	r2, r1
 8000b04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4091      	lsls	r1, r2
 8000b12:	000a      	movs	r2, r1
 8000b14:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2221      	movs	r2, #33	; 0x21
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2220      	movs	r2, #32
 8000b22:	2100      	movs	r1, #0
 8000b24:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d004      	beq.n	8000b38 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	0010      	movs	r0, r2
 8000b36:	4798      	blx	r3
    } 
  }
  return status;
 8000b38:	230f      	movs	r3, #15
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	781b      	ldrb	r3, [r3, #0]
}
 8000b3e:	0018      	movs	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	2204      	movs	r2, #4
 8000b64:	409a      	lsls	r2, r3
 8000b66:	0013      	movs	r3, r2
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	d024      	beq.n	8000bb8 <HAL_DMA_IRQHandler+0x72>
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	2204      	movs	r2, #4
 8000b72:	4013      	ands	r3, r2
 8000b74:	d020      	beq.n	8000bb8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	4013      	ands	r3, r2
 8000b80:	d107      	bne.n	8000b92 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	438a      	bics	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	000a      	movs	r2, r1
 8000ba0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d100      	bne.n	8000bac <HAL_DMA_IRQHandler+0x66>
 8000baa:	e06a      	b.n	8000c82 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	0010      	movs	r0, r2
 8000bb4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000bb6:	e064      	b.n	8000c82 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	d02b      	beq.n	8000c20 <HAL_DMA_IRQHandler+0xda>
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	2202      	movs	r2, #2
 8000bcc:	4013      	ands	r3, r2
 8000bce:	d027      	beq.n	8000c20 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	4013      	ands	r3, r2
 8000bda:	d10b      	bne.n	8000bf4 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	210a      	movs	r1, #10
 8000be8:	438a      	bics	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2221      	movs	r2, #33	; 0x21
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4091      	lsls	r1, r2
 8000c00:	000a      	movs	r2, r1
 8000c02:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2220      	movs	r2, #32
 8000c08:	2100      	movs	r1, #0
 8000c0a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d036      	beq.n	8000c82 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	0010      	movs	r0, r2
 8000c1c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000c1e:	e030      	b.n	8000c82 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	2208      	movs	r2, #8
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	d028      	beq.n	8000c82 <HAL_DMA_IRQHandler+0x13c>
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	2208      	movs	r2, #8
 8000c34:	4013      	ands	r3, r2
 8000c36:	d024      	beq.n	8000c82 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	210e      	movs	r1, #14
 8000c44:	438a      	bics	r2, r1
 8000c46:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c50:	2101      	movs	r1, #1
 8000c52:	4091      	lsls	r1, r2
 8000c54:	000a      	movs	r2, r1
 8000c56:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2221      	movs	r2, #33	; 0x21
 8000c62:	2101      	movs	r1, #1
 8000c64:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2220      	movs	r2, #32
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	0010      	movs	r0, r2
 8000c7e:	4798      	blx	r3
    }
   }
}  
 8000c80:	e7ff      	b.n	8000c82 <HAL_DMA_IRQHandler+0x13c>
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b004      	add	sp, #16
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <DMA_CalcBaseAndBitshift+0x30>)
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	4463      	add	r3, ip
 8000c9e:	2114      	movs	r1, #20
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff fa31 	bl	8000108 <__udivsi3>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	009a      	lsls	r2, r3, #2
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a03      	ldr	r2, [pc, #12]	; (8000cc0 <DMA_CalcBaseAndBitshift+0x34>)
 8000cb2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	bffdfff8 	.word	0xbffdfff8
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	e14f      	b.n	8000f74 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	000a      	movs	r2, r1
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d100      	bne.n	8000cec <HAL_GPIO_Init+0x28>
 8000cea:	e140      	b.n	8000f6e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d005      	beq.n	8000d04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d130      	bne.n	8000d66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	409a      	lsls	r2, r3
 8000d12:	0013      	movs	r3, r2
 8000d14:	43da      	mvns	r2, r3
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	409a      	lsls	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	43da      	mvns	r2, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	2201      	movs	r2, #1
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d017      	beq.n	8000da2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	43da      	mvns	r2, r3
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2203      	movs	r2, #3
 8000da8:	4013      	ands	r3, r2
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d123      	bne.n	8000df6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3208      	adds	r2, #8
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	58d3      	ldr	r3, [r2, r3]
 8000dba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	691a      	ldr	r2, [r3, #16]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2107      	movs	r1, #7
 8000dda:	400b      	ands	r3, r1
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	08da      	lsrs	r2, r3, #3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	6939      	ldr	r1, [r7, #16]
 8000df4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	409a      	lsls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	43da      	mvns	r2, r3
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2203      	movs	r2, #3
 8000e14:	401a      	ands	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	23c0      	movs	r3, #192	; 0xc0
 8000e30:	029b      	lsls	r3, r3, #10
 8000e32:	4013      	ands	r3, r2
 8000e34:	d100      	bne.n	8000e38 <HAL_GPIO_Init+0x174>
 8000e36:	e09a      	b.n	8000f6e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e38:	4b54      	ldr	r3, [pc, #336]	; (8000f8c <HAL_GPIO_Init+0x2c8>)
 8000e3a:	699a      	ldr	r2, [r3, #24]
 8000e3c:	4b53      	ldr	r3, [pc, #332]	; (8000f8c <HAL_GPIO_Init+0x2c8>)
 8000e3e:	2101      	movs	r1, #1
 8000e40:	430a      	orrs	r2, r1
 8000e42:	619a      	str	r2, [r3, #24]
 8000e44:	4b51      	ldr	r3, [pc, #324]	; (8000f8c <HAL_GPIO_Init+0x2c8>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e50:	4a4f      	ldr	r2, [pc, #316]	; (8000f90 <HAL_GPIO_Init+0x2cc>)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	589b      	ldr	r3, [r3, r2]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2203      	movs	r2, #3
 8000e62:	4013      	ands	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	0013      	movs	r3, r2
 8000e6c:	43da      	mvns	r2, r3
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	2390      	movs	r3, #144	; 0x90
 8000e78:	05db      	lsls	r3, r3, #23
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d013      	beq.n	8000ea6 <HAL_GPIO_Init+0x1e2>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a44      	ldr	r2, [pc, #272]	; (8000f94 <HAL_GPIO_Init+0x2d0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d00d      	beq.n	8000ea2 <HAL_GPIO_Init+0x1de>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a43      	ldr	r2, [pc, #268]	; (8000f98 <HAL_GPIO_Init+0x2d4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d007      	beq.n	8000e9e <HAL_GPIO_Init+0x1da>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a42      	ldr	r2, [pc, #264]	; (8000f9c <HAL_GPIO_Init+0x2d8>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_GPIO_Init+0x1d6>
 8000e96:	2303      	movs	r3, #3
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x1e4>
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	e004      	b.n	8000ea8 <HAL_GPIO_Init+0x1e4>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_Init+0x1e4>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <HAL_GPIO_Init+0x1e4>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	2103      	movs	r1, #3
 8000eac:	400a      	ands	r2, r1
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4093      	lsls	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eb8:	4935      	ldr	r1, [pc, #212]	; (8000f90 <HAL_GPIO_Init+0x2cc>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec6:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <HAL_GPIO_Init+0x2dc>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	025b      	lsls	r3, r3, #9
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_GPIO_Init+0x2dc>)
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <HAL_GPIO_Init+0x2dc>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43da      	mvns	r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	029b      	lsls	r3, r3, #10
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <HAL_GPIO_Init+0x2dc>)
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <HAL_GPIO_Init+0x2dc>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	035b      	lsls	r3, r3, #13
 8000f32:	4013      	ands	r3, r2
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_GPIO_Init+0x2dc>)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_GPIO_Init+0x2dc>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	039b      	lsls	r3, r3, #14
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_GPIO_Init+0x2dc>)
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	40da      	lsrs	r2, r3
 8000f7c:	1e13      	subs	r3, r2, #0
 8000f7e:	d000      	beq.n	8000f82 <HAL_GPIO_Init+0x2be>
 8000f80:	e6a8      	b.n	8000cd4 <HAL_GPIO_Init+0x10>
  } 
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b006      	add	sp, #24
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000
 8000f94:	48000400 	.word	0x48000400
 8000f98:	48000800 	.word	0x48000800
 8000f9c:	48000c00 	.word	0x48000c00
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	0008      	movs	r0, r1
 8000fae:	0011      	movs	r1, r2
 8000fb0:	1cbb      	adds	r3, r7, #2
 8000fb2:	1c02      	adds	r2, r0, #0
 8000fb4:	801a      	strh	r2, [r3, #0]
 8000fb6:	1c7b      	adds	r3, r7, #1
 8000fb8:	1c0a      	adds	r2, r1, #0
 8000fba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fbc:	1c7b      	adds	r3, r7, #1
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc4:	1cbb      	adds	r3, r7, #2
 8000fc6:	881a      	ldrh	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fcc:	e003      	b.n	8000fd6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fce:	1cbb      	adds	r3, r7, #2
 8000fd0:	881a      	ldrh	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e301      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d100      	bne.n	8000ffe <HAL_RCC_OscConfig+0x1e>
 8000ffc:	e08d      	b.n	800111a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ffe:	4bc3      	ldr	r3, [pc, #780]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	220c      	movs	r2, #12
 8001004:	4013      	ands	r3, r2
 8001006:	2b04      	cmp	r3, #4
 8001008:	d00e      	beq.n	8001028 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800100a:	4bc0      	ldr	r3, [pc, #768]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	220c      	movs	r2, #12
 8001010:	4013      	ands	r3, r2
 8001012:	2b08      	cmp	r3, #8
 8001014:	d116      	bne.n	8001044 <HAL_RCC_OscConfig+0x64>
 8001016:	4bbd      	ldr	r3, [pc, #756]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	025b      	lsls	r3, r3, #9
 800101e:	401a      	ands	r2, r3
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	025b      	lsls	r3, r3, #9
 8001024:	429a      	cmp	r2, r3
 8001026:	d10d      	bne.n	8001044 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	4bb8      	ldr	r3, [pc, #736]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	029b      	lsls	r3, r3, #10
 8001030:	4013      	ands	r3, r2
 8001032:	d100      	bne.n	8001036 <HAL_RCC_OscConfig+0x56>
 8001034:	e070      	b.n	8001118 <HAL_RCC_OscConfig+0x138>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d000      	beq.n	8001040 <HAL_RCC_OscConfig+0x60>
 800103e:	e06b      	b.n	8001118 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e2d8      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d107      	bne.n	800105c <HAL_RCC_OscConfig+0x7c>
 800104c:	4baf      	ldr	r3, [pc, #700]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4bae      	ldr	r3, [pc, #696]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	0249      	lsls	r1, r1, #9
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e02f      	b.n	80010bc <HAL_RCC_OscConfig+0xdc>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10c      	bne.n	800107e <HAL_RCC_OscConfig+0x9e>
 8001064:	4ba9      	ldr	r3, [pc, #676]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4ba8      	ldr	r3, [pc, #672]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800106a:	49a9      	ldr	r1, [pc, #676]	; (8001310 <HAL_RCC_OscConfig+0x330>)
 800106c:	400a      	ands	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	4ba6      	ldr	r3, [pc, #664]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4ba5      	ldr	r3, [pc, #660]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001076:	49a7      	ldr	r1, [pc, #668]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001078:	400a      	ands	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e01e      	b.n	80010bc <HAL_RCC_OscConfig+0xdc>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b05      	cmp	r3, #5
 8001084:	d10e      	bne.n	80010a4 <HAL_RCC_OscConfig+0xc4>
 8001086:	4ba1      	ldr	r3, [pc, #644]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4ba0      	ldr	r3, [pc, #640]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	02c9      	lsls	r1, r1, #11
 8001090:	430a      	orrs	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	4b9d      	ldr	r3, [pc, #628]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b9c      	ldr	r3, [pc, #624]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	0249      	lsls	r1, r1, #9
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0xdc>
 80010a4:	4b99      	ldr	r3, [pc, #612]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b98      	ldr	r3, [pc, #608]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80010aa:	4999      	ldr	r1, [pc, #612]	; (8001310 <HAL_RCC_OscConfig+0x330>)
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	4b96      	ldr	r3, [pc, #600]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b95      	ldr	r3, [pc, #596]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80010b6:	4997      	ldr	r1, [pc, #604]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80010b8:	400a      	ands	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d014      	beq.n	80010ee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fbca 	bl	800085c <HAL_GetTick>
 80010c8:	0003      	movs	r3, r0
 80010ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ce:	f7ff fbc5 	bl	800085c <HAL_GetTick>
 80010d2:	0002      	movs	r2, r0
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b64      	cmp	r3, #100	; 0x64
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e28a      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e0:	4b8a      	ldr	r3, [pc, #552]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	029b      	lsls	r3, r3, #10
 80010e8:	4013      	ands	r3, r2
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0xee>
 80010ec:	e015      	b.n	800111a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ee:	f7ff fbb5 	bl	800085c <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fbb0 	bl	800085c <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e275      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110a:	4b80      	ldr	r3, [pc, #512]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	029b      	lsls	r3, r3, #10
 8001112:	4013      	ands	r3, r2
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x118>
 8001116:	e000      	b.n	800111a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2202      	movs	r2, #2
 8001120:	4013      	ands	r3, r2
 8001122:	d100      	bne.n	8001126 <HAL_RCC_OscConfig+0x146>
 8001124:	e069      	b.n	80011fa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001126:	4b79      	ldr	r3, [pc, #484]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	220c      	movs	r2, #12
 800112c:	4013      	ands	r3, r2
 800112e:	d00b      	beq.n	8001148 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001130:	4b76      	ldr	r3, [pc, #472]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	220c      	movs	r2, #12
 8001136:	4013      	ands	r3, r2
 8001138:	2b08      	cmp	r3, #8
 800113a:	d11c      	bne.n	8001176 <HAL_RCC_OscConfig+0x196>
 800113c:	4b73      	ldr	r3, [pc, #460]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	025b      	lsls	r3, r3, #9
 8001144:	4013      	ands	r3, r2
 8001146:	d116      	bne.n	8001176 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001148:	4b70      	ldr	r3, [pc, #448]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2202      	movs	r2, #2
 800114e:	4013      	ands	r3, r2
 8001150:	d005      	beq.n	800115e <HAL_RCC_OscConfig+0x17e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d001      	beq.n	800115e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e24b      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115e:	4b6b      	ldr	r3, [pc, #428]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	22f8      	movs	r2, #248	; 0xf8
 8001164:	4393      	bics	r3, r2
 8001166:	0019      	movs	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	00da      	lsls	r2, r3, #3
 800116e:	4b67      	ldr	r3, [pc, #412]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001174:	e041      	b.n	80011fa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d024      	beq.n	80011c8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800117e:	4b63      	ldr	r3, [pc, #396]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b62      	ldr	r3, [pc, #392]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001184:	2101      	movs	r1, #1
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118a:	f7ff fb67 	bl	800085c <HAL_GetTick>
 800118e:	0003      	movs	r3, r0
 8001190:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001194:	f7ff fb62 	bl	800085c <HAL_GetTick>
 8001198:	0002      	movs	r2, r0
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e227      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	4b59      	ldr	r3, [pc, #356]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2202      	movs	r2, #2
 80011ac:	4013      	ands	r3, r2
 80011ae:	d0f1      	beq.n	8001194 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b0:	4b56      	ldr	r3, [pc, #344]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	22f8      	movs	r2, #248	; 0xf8
 80011b6:	4393      	bics	r3, r2
 80011b8:	0019      	movs	r1, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	00da      	lsls	r2, r3, #3
 80011c0:	4b52      	ldr	r3, [pc, #328]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80011c2:	430a      	orrs	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	e018      	b.n	80011fa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c8:	4b50      	ldr	r3, [pc, #320]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b4f      	ldr	r3, [pc, #316]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80011ce:	2101      	movs	r1, #1
 80011d0:	438a      	bics	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fb42 	bl	800085c <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fb3d 	bl	800085c <HAL_GetTick>
 80011e2:	0002      	movs	r2, r0
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e202      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f0:	4b46      	ldr	r3, [pc, #280]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2202      	movs	r2, #2
 80011f6:	4013      	ands	r3, r2
 80011f8:	d1f1      	bne.n	80011de <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2208      	movs	r2, #8
 8001200:	4013      	ands	r3, r2
 8001202:	d036      	beq.n	8001272 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d019      	beq.n	8001240 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800120e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001210:	4b3e      	ldr	r3, [pc, #248]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001212:	2101      	movs	r1, #1
 8001214:	430a      	orrs	r2, r1
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001218:	f7ff fb20 	bl	800085c <HAL_GetTick>
 800121c:	0003      	movs	r3, r0
 800121e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001222:	f7ff fb1b 	bl	800085c <HAL_GetTick>
 8001226:	0002      	movs	r2, r0
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1e0      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001234:	4b35      	ldr	r3, [pc, #212]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	2202      	movs	r2, #2
 800123a:	4013      	ands	r3, r2
 800123c:	d0f1      	beq.n	8001222 <HAL_RCC_OscConfig+0x242>
 800123e:	e018      	b.n	8001272 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001240:	4b32      	ldr	r3, [pc, #200]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001246:	2101      	movs	r1, #1
 8001248:	438a      	bics	r2, r1
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7ff fb06 	bl	800085c <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff fb01 	bl	800085c <HAL_GetTick>
 800125a:	0002      	movs	r2, r0
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1c6      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	2202      	movs	r2, #2
 800126e:	4013      	ands	r3, r2
 8001270:	d1f1      	bne.n	8001256 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2204      	movs	r2, #4
 8001278:	4013      	ands	r3, r2
 800127a:	d100      	bne.n	800127e <HAL_RCC_OscConfig+0x29e>
 800127c:	e0b4      	b.n	80013e8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127e:	201f      	movs	r0, #31
 8001280:	183b      	adds	r3, r7, r0
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001288:	69da      	ldr	r2, [r3, #28]
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	055b      	lsls	r3, r3, #21
 800128e:	4013      	ands	r3, r2
 8001290:	d110      	bne.n	80012b4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001294:	69da      	ldr	r2, [r3, #28]
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	0549      	lsls	r1, r1, #21
 800129c:	430a      	orrs	r2, r1
 800129e:	61da      	str	r2, [r3, #28]
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	055b      	lsls	r3, r3, #21
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012ae:	183b      	adds	r3, r7, r0
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_RCC_OscConfig+0x338>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4013      	ands	r3, r2
 80012be:	d11a      	bne.n	80012f6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_RCC_OscConfig+0x338>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_RCC_OscConfig+0x338>)
 80012c6:	2180      	movs	r1, #128	; 0x80
 80012c8:	0049      	lsls	r1, r1, #1
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fac5 	bl	800085c <HAL_GetTick>
 80012d2:	0003      	movs	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d8:	f7ff fac0 	bl	800085c <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e185      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_RCC_OscConfig+0x338>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4013      	ands	r3, r2
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d10e      	bne.n	800131c <HAL_RCC_OscConfig+0x33c>
 80012fe:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001300:	6a1a      	ldr	r2, [r3, #32]
 8001302:	4b02      	ldr	r3, [pc, #8]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 8001304:	2101      	movs	r1, #1
 8001306:	430a      	orrs	r2, r1
 8001308:	621a      	str	r2, [r3, #32]
 800130a:	e035      	b.n	8001378 <HAL_RCC_OscConfig+0x398>
 800130c:	40021000 	.word	0x40021000
 8001310:	fffeffff 	.word	0xfffeffff
 8001314:	fffbffff 	.word	0xfffbffff
 8001318:	40007000 	.word	0x40007000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10c      	bne.n	800133e <HAL_RCC_OscConfig+0x35e>
 8001324:	4bb6      	ldr	r3, [pc, #728]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001326:	6a1a      	ldr	r2, [r3, #32]
 8001328:	4bb5      	ldr	r3, [pc, #724]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800132a:	2101      	movs	r1, #1
 800132c:	438a      	bics	r2, r1
 800132e:	621a      	str	r2, [r3, #32]
 8001330:	4bb3      	ldr	r3, [pc, #716]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001332:	6a1a      	ldr	r2, [r3, #32]
 8001334:	4bb2      	ldr	r3, [pc, #712]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001336:	2104      	movs	r1, #4
 8001338:	438a      	bics	r2, r1
 800133a:	621a      	str	r2, [r3, #32]
 800133c:	e01c      	b.n	8001378 <HAL_RCC_OscConfig+0x398>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b05      	cmp	r3, #5
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x380>
 8001346:	4bae      	ldr	r3, [pc, #696]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001348:	6a1a      	ldr	r2, [r3, #32]
 800134a:	4bad      	ldr	r3, [pc, #692]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800134c:	2104      	movs	r1, #4
 800134e:	430a      	orrs	r2, r1
 8001350:	621a      	str	r2, [r3, #32]
 8001352:	4bab      	ldr	r3, [pc, #684]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001354:	6a1a      	ldr	r2, [r3, #32]
 8001356:	4baa      	ldr	r3, [pc, #680]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001358:	2101      	movs	r1, #1
 800135a:	430a      	orrs	r2, r1
 800135c:	621a      	str	r2, [r3, #32]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0x398>
 8001360:	4ba7      	ldr	r3, [pc, #668]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001362:	6a1a      	ldr	r2, [r3, #32]
 8001364:	4ba6      	ldr	r3, [pc, #664]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001366:	2101      	movs	r1, #1
 8001368:	438a      	bics	r2, r1
 800136a:	621a      	str	r2, [r3, #32]
 800136c:	4ba4      	ldr	r3, [pc, #656]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800136e:	6a1a      	ldr	r2, [r3, #32]
 8001370:	4ba3      	ldr	r3, [pc, #652]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001372:	2104      	movs	r1, #4
 8001374:	438a      	bics	r2, r1
 8001376:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d014      	beq.n	80013aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001380:	f7ff fa6c 	bl	800085c <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001388:	e009      	b.n	800139e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff fa67 	bl	800085c <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	4a9b      	ldr	r2, [pc, #620]	; (8001604 <HAL_RCC_OscConfig+0x624>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e12b      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139e:	4b98      	ldr	r3, [pc, #608]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x3aa>
 80013a8:	e013      	b.n	80013d2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fa57 	bl	800085c <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b2:	e009      	b.n	80013c8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b4:	f7ff fa52 	bl	800085c <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	4a91      	ldr	r2, [pc, #580]	; (8001604 <HAL_RCC_OscConfig+0x624>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e116      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c8:	4b8d      	ldr	r3, [pc, #564]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	2202      	movs	r2, #2
 80013ce:	4013      	ands	r3, r2
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013d2:	231f      	movs	r3, #31
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013dc:	4b88      	ldr	r3, [pc, #544]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 80013de:	69da      	ldr	r2, [r3, #28]
 80013e0:	4b87      	ldr	r3, [pc, #540]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 80013e2:	4989      	ldr	r1, [pc, #548]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 80013e4:	400a      	ands	r2, r1
 80013e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2210      	movs	r2, #16
 80013ee:	4013      	ands	r3, r2
 80013f0:	d063      	beq.n	80014ba <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d12a      	bne.n	8001450 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013fa:	4b81      	ldr	r3, [pc, #516]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 80013fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013fe:	4b80      	ldr	r3, [pc, #512]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001400:	2104      	movs	r1, #4
 8001402:	430a      	orrs	r2, r1
 8001404:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001406:	4b7e      	ldr	r3, [pc, #504]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140a:	4b7d      	ldr	r3, [pc, #500]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800140c:	2101      	movs	r1, #1
 800140e:	430a      	orrs	r2, r1
 8001410:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fa23 	bl	800085c <HAL_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800141c:	f7ff fa1e 	bl	800085c <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e0e3      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800142e:	4b74      	ldr	r3, [pc, #464]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001432:	2202      	movs	r2, #2
 8001434:	4013      	ands	r3, r2
 8001436:	d0f1      	beq.n	800141c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001438:	4b71      	ldr	r3, [pc, #452]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143c:	22f8      	movs	r2, #248	; 0xf8
 800143e:	4393      	bics	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	00da      	lsls	r2, r3, #3
 8001448:	4b6d      	ldr	r3, [pc, #436]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800144a:	430a      	orrs	r2, r1
 800144c:	635a      	str	r2, [r3, #52]	; 0x34
 800144e:	e034      	b.n	80014ba <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	3305      	adds	r3, #5
 8001456:	d111      	bne.n	800147c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001458:	4b69      	ldr	r3, [pc, #420]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800145a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145c:	4b68      	ldr	r3, [pc, #416]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800145e:	2104      	movs	r1, #4
 8001460:	438a      	bics	r2, r1
 8001462:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001464:	4b66      	ldr	r3, [pc, #408]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001468:	22f8      	movs	r2, #248	; 0xf8
 800146a:	4393      	bics	r3, r2
 800146c:	0019      	movs	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	00da      	lsls	r2, r3, #3
 8001474:	4b62      	ldr	r3, [pc, #392]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001476:	430a      	orrs	r2, r1
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
 800147a:	e01e      	b.n	80014ba <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800147c:	4b60      	ldr	r3, [pc, #384]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800147e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001480:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001482:	2104      	movs	r1, #4
 8001484:	430a      	orrs	r2, r1
 8001486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001488:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800148a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148c:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800148e:	2101      	movs	r1, #1
 8001490:	438a      	bics	r2, r1
 8001492:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001494:	f7ff f9e2 	bl	800085c <HAL_GetTick>
 8001498:	0003      	movs	r3, r0
 800149a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800149e:	f7ff f9dd 	bl	800085c <HAL_GetTick>
 80014a2:	0002      	movs	r2, r0
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e0a2      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014b0:	4b53      	ldr	r3, [pc, #332]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 80014b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b4:	2202      	movs	r2, #2
 80014b6:	4013      	ands	r3, r2
 80014b8:	d1f1      	bne.n	800149e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d100      	bne.n	80014c4 <HAL_RCC_OscConfig+0x4e4>
 80014c2:	e097      	b.n	80015f4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c4:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	220c      	movs	r2, #12
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d100      	bne.n	80014d2 <HAL_RCC_OscConfig+0x4f2>
 80014d0:	e06b      	b.n	80015aa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d14c      	bne.n	8001574 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b49      	ldr	r3, [pc, #292]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b48      	ldr	r3, [pc, #288]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 80014e0:	494a      	ldr	r1, [pc, #296]	; (800160c <HAL_RCC_OscConfig+0x62c>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff f9b9 	bl	800085c <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff f9b4 	bl	800085c <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e079      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	049b      	lsls	r3, r3, #18
 800150a:	4013      	ands	r3, r2
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800150e:	4b3c      	ldr	r3, [pc, #240]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	220f      	movs	r2, #15
 8001514:	4393      	bics	r3, r2
 8001516:	0019      	movs	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800151c:	4b38      	ldr	r3, [pc, #224]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800151e:	430a      	orrs	r2, r1
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4a3a      	ldr	r2, [pc, #232]	; (8001610 <HAL_RCC_OscConfig+0x630>)
 8001528:	4013      	ands	r3, r2
 800152a:	0019      	movs	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	431a      	orrs	r2, r3
 8001536:	4b32      	ldr	r3, [pc, #200]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001538:	430a      	orrs	r2, r1
 800153a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	0449      	lsls	r1, r1, #17
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7ff f987 	bl	800085c <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff f982 	bl	800085c <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e047      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	049b      	lsls	r3, r3, #18
 800156e:	4013      	ands	r3, r2
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x574>
 8001572:	e03f      	b.n	80015f4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800157a:	4924      	ldr	r1, [pc, #144]	; (800160c <HAL_RCC_OscConfig+0x62c>)
 800157c:	400a      	ands	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff f96c 	bl	800085c <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff f967 	bl	800085c <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e02c      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	049b      	lsls	r3, r3, #18
 80015a4:	4013      	ands	r3, r2
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x5aa>
 80015a8:	e024      	b.n	80015f4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e01f      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_RCC_OscConfig+0x620>)
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	025b      	lsls	r3, r3, #9
 80015c8:	401a      	ands	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d10e      	bne.n	80015f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	220f      	movs	r2, #15
 80015d6:	401a      	ands	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	23f0      	movs	r3, #240	; 0xf0
 80015e4:	039b      	lsls	r3, r3, #14
 80015e6:	401a      	ands	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b008      	add	sp, #32
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	40021000 	.word	0x40021000
 8001604:	00001388 	.word	0x00001388
 8001608:	efffffff 	.word	0xefffffff
 800160c:	feffffff 	.word	0xfeffffff
 8001610:	ffc2ffff 	.word	0xffc2ffff

08001614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b3      	b.n	8001790 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b5b      	ldr	r3, [pc, #364]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2201      	movs	r2, #1
 800162e:	4013      	ands	r3, r2
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d911      	bls.n	800165a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b58      	ldr	r3, [pc, #352]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	4393      	bics	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	4b55      	ldr	r3, [pc, #340]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	4013      	ands	r3, r2
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d001      	beq.n	800165a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e09a      	b.n	8001790 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2202      	movs	r2, #2
 8001660:	4013      	ands	r3, r2
 8001662:	d015      	beq.n	8001690 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2204      	movs	r2, #4
 800166a:	4013      	ands	r3, r2
 800166c:	d006      	beq.n	800167c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800166e:	4b4b      	ldr	r3, [pc, #300]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 8001674:	21e0      	movs	r1, #224	; 0xe0
 8001676:	00c9      	lsls	r1, r1, #3
 8001678:	430a      	orrs	r2, r1
 800167a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800167c:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	22f0      	movs	r2, #240	; 0xf0
 8001682:	4393      	bics	r3, r2
 8001684:	0019      	movs	r1, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	4b44      	ldr	r3, [pc, #272]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 800168c:	430a      	orrs	r2, r1
 800168e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2201      	movs	r2, #1
 8001696:	4013      	ands	r3, r2
 8001698:	d040      	beq.n	800171c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	029b      	lsls	r3, r3, #10
 80016aa:	4013      	ands	r3, r2
 80016ac:	d114      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e06e      	b.n	8001790 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	049b      	lsls	r3, r3, #18
 80016c2:	4013      	ands	r3, r2
 80016c4:	d108      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e062      	b.n	8001790 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2202      	movs	r2, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e05b      	b.n	8001790 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2203      	movs	r2, #3
 80016de:	4393      	bics	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 80016e8:	430a      	orrs	r2, r1
 80016ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ec:	f7ff f8b6 	bl	800085c <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f4:	e009      	b.n	800170a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f6:	f7ff f8b1 	bl	800085c <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <HAL_RCC_ClockConfig+0x18c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e042      	b.n	8001790 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	220c      	movs	r2, #12
 8001710:	401a      	ands	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	429a      	cmp	r2, r3
 800171a:	d1ec      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	4013      	ands	r3, r2
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d211      	bcs.n	800174e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2201      	movs	r2, #1
 8001730:	4393      	bics	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_RCC_ClockConfig+0x184>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	4013      	ands	r3, r2
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e020      	b.n	8001790 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2204      	movs	r2, #4
 8001754:	4013      	ands	r3, r2
 8001756:	d009      	beq.n	800176c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <HAL_RCC_ClockConfig+0x190>)
 800175e:	4013      	ands	r3, r2
 8001760:	0019      	movs	r1, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 8001768:	430a      	orrs	r2, r1
 800176a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800176c:	f000 f820 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 8001770:	0001      	movs	r1, r0
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_RCC_ClockConfig+0x188>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	220f      	movs	r2, #15
 800177a:	4013      	ands	r3, r2
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_RCC_ClockConfig+0x194>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	000a      	movs	r2, r1
 8001782:	40da      	lsrs	r2, r3
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_ClockConfig+0x198>)
 8001786:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff f821 	bl	80007d0 <HAL_InitTick>
  
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b004      	add	sp, #16
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40022000 	.word	0x40022000
 800179c:	40021000 	.word	0x40021000
 80017a0:	00001388 	.word	0x00001388
 80017a4:	fffff8ff 	.word	0xfffff8ff
 80017a8:	0800308c 	.word	0x0800308c
 80017ac:	20000000 	.word	0x20000000

080017b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b08f      	sub	sp, #60	; 0x3c
 80017b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017b6:	2314      	movs	r3, #20
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	4a2b      	ldr	r2, [pc, #172]	; (8001868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017be:	c313      	stmia	r3!, {r0, r1, r4}
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	4a29      	ldr	r2, [pc, #164]	; (800186c <HAL_RCC_GetSysClockFreq+0xbc>)
 80017c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017ca:	c313      	stmia	r3!, {r0, r1, r4}
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d4:	2300      	movs	r3, #0
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	220c      	movs	r2, #12
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d002      	beq.n	80017fa <HAL_RCC_GetSysClockFreq+0x4a>
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d003      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x50>
 80017f8:	e02d      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_RCC_GetSysClockFreq+0xc4>)
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017fe:	e02d      	b.n	800185c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001802:	0c9b      	lsrs	r3, r3, #18
 8001804:	220f      	movs	r2, #15
 8001806:	4013      	ands	r3, r2
 8001808:	2214      	movs	r2, #20
 800180a:	18ba      	adds	r2, r7, r2
 800180c:	5cd3      	ldrb	r3, [r2, r3]
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	220f      	movs	r2, #15
 8001816:	4013      	ands	r3, r2
 8001818:	1d3a      	adds	r2, r7, #4
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800181e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	025b      	lsls	r3, r3, #9
 8001824:	4013      	ands	r3, r2
 8001826:	d009      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800182a:	4812      	ldr	r0, [pc, #72]	; (8001874 <HAL_RCC_GetSysClockFreq+0xc4>)
 800182c:	f7fe fc6c 	bl	8000108 <__udivsi3>
 8001830:	0003      	movs	r3, r0
 8001832:	001a      	movs	r2, r3
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	4353      	muls	r3, r2
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
 800183a:	e009      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800183c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800183e:	000a      	movs	r2, r1
 8001840:	0152      	lsls	r2, r2, #5
 8001842:	1a52      	subs	r2, r2, r1
 8001844:	0193      	lsls	r3, r2, #6
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	185b      	adds	r3, r3, r1
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001854:	e002      	b.n	800185c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800185a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800185e:	0018      	movs	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	b00f      	add	sp, #60	; 0x3c
 8001864:	bd90      	pop	{r4, r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	0800306c 	.word	0x0800306c
 800186c:	0800307c 	.word	0x0800307c
 8001870:	40021000 	.word	0x40021000
 8001874:	007a1200 	.word	0x007a1200

08001878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <HAL_RCC_GetHCLKFreq+0x10>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	20000000 	.word	0x20000000

0800188c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001890:	f7ff fff2 	bl	8001878 <HAL_RCC_GetHCLKFreq>
 8001894:	0001      	movs	r1, r0
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	0a1b      	lsrs	r3, r3, #8
 800189c:	2207      	movs	r2, #7
 800189e:	4013      	ands	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	40d9      	lsrs	r1, r3
 80018a6:	000b      	movs	r3, r1
}    
 80018a8:	0018      	movs	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	40021000 	.word	0x40021000
 80018b4:	0800309c 	.word	0x0800309c

080018b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	025b      	lsls	r3, r3, #9
 80018d0:	4013      	ands	r3, r2
 80018d2:	d100      	bne.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80018d4:	e08e      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80018d6:	2017      	movs	r0, #23
 80018d8:	183b      	adds	r3, r7, r0
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018de:	4b5f      	ldr	r3, [pc, #380]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	055b      	lsls	r3, r3, #21
 80018e6:	4013      	ands	r3, r2
 80018e8:	d110      	bne.n	800190c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	4b5b      	ldr	r3, [pc, #364]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	0549      	lsls	r1, r1, #21
 80018f4:	430a      	orrs	r2, r1
 80018f6:	61da      	str	r2, [r3, #28]
 80018f8:	4b58      	ldr	r3, [pc, #352]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018fa:	69da      	ldr	r2, [r3, #28]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	055b      	lsls	r3, r3, #21
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001906:	183b      	adds	r3, r7, r0
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190c:	4b54      	ldr	r3, [pc, #336]	; (8001a60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4013      	ands	r3, r2
 8001916:	d11a      	bne.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001918:	4b51      	ldr	r3, [pc, #324]	; (8001a60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	0049      	lsls	r1, r1, #1
 8001922:	430a      	orrs	r2, r1
 8001924:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001926:	f7fe ff99 	bl	800085c <HAL_GetTick>
 800192a:	0003      	movs	r3, r0
 800192c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	e008      	b.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001930:	f7fe ff94 	bl	800085c <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e087      	b.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4013      	ands	r3, r2
 800194c:	d0f0      	beq.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001950:	6a1a      	ldr	r2, [r3, #32]
 8001952:	23c0      	movs	r3, #192	; 0xc0
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4013      	ands	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d034      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	23c0      	movs	r3, #192	; 0xc0
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4013      	ands	r3, r2
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d02c      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4a3b      	ldr	r2, [pc, #236]	; (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800197a:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800197c:	6a1a      	ldr	r2, [r3, #32]
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	0249      	lsls	r1, r1, #9
 8001984:	430a      	orrs	r2, r1
 8001986:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800198a:	6a1a      	ldr	r2, [r3, #32]
 800198c:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800198e:	4936      	ldr	r1, [pc, #216]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001990:	400a      	ands	r2, r1
 8001992:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001994:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7fe ff5b 	bl	800085c <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019aa:	e009      	b.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f7fe ff56 	bl	800085c <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	4a2d      	ldr	r2, [pc, #180]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e048      	b.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	2202      	movs	r2, #2
 80019c6:	4013      	ands	r3, r2
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a25      	ldr	r2, [pc, #148]	; (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019da:	430a      	orrs	r2, r1
 80019dc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019de:	2317      	movs	r3, #23
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019ea:	69da      	ldr	r2, [r3, #28]
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019ee:	4920      	ldr	r1, [pc, #128]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019f0:	400a      	ands	r2, r1
 80019f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	d009      	beq.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	2203      	movs	r2, #3
 8001a04:	4393      	bics	r3, r2
 8001a06:	0019      	movs	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2220      	movs	r2, #32
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d009      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	2210      	movs	r2, #16
 8001a22:	4393      	bics	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d009      	beq.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	4393      	bics	r3, r2
 8001a44:	0019      	movs	r1, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	0018      	movs	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b006      	add	sp, #24
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40007000 	.word	0x40007000
 8001a64:	fffffcff 	.word	0xfffffcff
 8001a68:	fffeffff 	.word	0xfffeffff
 8001a6c:	00001388 	.word	0x00001388
 8001a70:	efffffff 	.word	0xefffffff

08001a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0a8      	b.n	8001bd8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	2382      	movs	r3, #130	; 0x82
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d009      	beq.n	8001aae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61da      	str	r2, [r3, #28]
 8001aa0:	e005      	b.n	8001aae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	225d      	movs	r2, #93	; 0x5d
 8001ab8:	5c9b      	ldrb	r3, [r3, r2]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d107      	bne.n	8001ad0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	225c      	movs	r2, #92	; 0x5c
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7fe fd40 	bl	8000550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	225d      	movs	r2, #93	; 0x5d
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2140      	movs	r1, #64	; 0x40
 8001ae4:	438a      	bics	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	23e0      	movs	r3, #224	; 0xe0
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d902      	bls.n	8001afa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e002      	b.n	8001b00 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	015b      	lsls	r3, r3, #5
 8001afe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	23f0      	movs	r3, #240	; 0xf0
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d008      	beq.n	8001b1e <HAL_SPI_Init+0xaa>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	23e0      	movs	r3, #224	; 0xe0
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d002      	beq.n	8001b1e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	2382      	movs	r3, #130	; 0x82
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	401a      	ands	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6899      	ldr	r1, [r3, #8]
 8001b2c:	2384      	movs	r3, #132	; 0x84
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	400b      	ands	r3, r1
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	2102      	movs	r1, #2
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	2101      	movs	r1, #1
 8001b44:	400b      	ands	r3, r1
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6999      	ldr	r1, [r3, #24]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	400b      	ands	r3, r1
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2138      	movs	r1, #56	; 0x38
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	400b      	ands	r3, r1
 8001b66:	431a      	orrs	r2, r3
 8001b68:	0011      	movs	r1, r2
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	019b      	lsls	r3, r3, #6
 8001b72:	401a      	ands	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	0c1b      	lsrs	r3, r3, #16
 8001b82:	2204      	movs	r2, #4
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b94:	2108      	movs	r1, #8
 8001b96:	400b      	ands	r3, r1
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68d9      	ldr	r1, [r3, #12]
 8001b9e:	23f0      	movs	r3, #240	; 0xf0
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	0011      	movs	r1, r2
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	015b      	lsls	r3, r3, #5
 8001bae:	401a      	ands	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4907      	ldr	r1, [pc, #28]	; (8001be0 <HAL_SPI_Init+0x16c>)
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	225d      	movs	r2, #93	; 0x5d
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b004      	add	sp, #16
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	fffff7ff 	.word	0xfffff7ff

08001be4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	1dbb      	adds	r3, r7, #6
 8001bf2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bf4:	2317      	movs	r3, #23
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	2382      	movs	r3, #130	; 0x82
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d113      	bne.n	8001c30 <HAL_SPI_Receive+0x4c>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10f      	bne.n	8001c30 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	225d      	movs	r2, #93	; 0x5d
 8001c14:	2104      	movs	r1, #4
 8001c16:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c18:	1dbb      	adds	r3, r7, #6
 8001c1a:	881c      	ldrh	r4, [r3, #0]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	68b9      	ldr	r1, [r7, #8]
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	0023      	movs	r3, r4
 8001c28:	f000 f928 	bl	8001e7c <HAL_SPI_TransmitReceive>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	e11c      	b.n	8001e6a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	225c      	movs	r2, #92	; 0x5c
 8001c34:	5c9b      	ldrb	r3, [r3, r2]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_SPI_Receive+0x5a>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e115      	b.n	8001e6a <HAL_SPI_Receive+0x286>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	225c      	movs	r2, #92	; 0x5c
 8001c42:	2101      	movs	r1, #1
 8001c44:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c46:	f7fe fe09 	bl	800085c <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	225d      	movs	r2, #93	; 0x5d
 8001c52:	5c9b      	ldrb	r3, [r3, r2]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d004      	beq.n	8001c64 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8001c5a:	2317      	movs	r3, #23
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	2202      	movs	r2, #2
 8001c60:	701a      	strb	r2, [r3, #0]
    goto error;
 8001c62:	e0f7      	b.n	8001e54 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_SPI_Receive+0x8e>
 8001c6a:	1dbb      	adds	r3, r7, #6
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d104      	bne.n	8001c7c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8001c72:	2317      	movs	r3, #23
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
    goto error;
 8001c7a:	e0eb      	b.n	8001e54 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	225d      	movs	r2, #93	; 0x5d
 8001c80:	2104      	movs	r1, #4
 8001c82:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1dba      	adds	r2, r7, #6
 8001c94:	2144      	movs	r1, #68	; 0x44
 8001c96:	8812      	ldrh	r2, [r2, #0]
 8001c98:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1dba      	adds	r2, r7, #6
 8001c9e:	2146      	movs	r1, #70	; 0x46
 8001ca0:	8812      	ldrh	r2, [r2, #0]
 8001ca2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	23e0      	movs	r3, #224	; 0xe0
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d908      	bls.n	8001ce0 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4966      	ldr	r1, [pc, #408]	; (8001e74 <HAL_SPI_Receive+0x290>)
 8001cda:	400a      	ands	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	e008      	b.n	8001cf2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	0149      	lsls	r1, r1, #5
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d10f      	bne.n	8001d1e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2140      	movs	r1, #64	; 0x40
 8001d0a:	438a      	bics	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4957      	ldr	r1, [pc, #348]	; (8001e78 <HAL_SPI_Receive+0x294>)
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2240      	movs	r2, #64	; 0x40
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b40      	cmp	r3, #64	; 0x40
 8001d2a:	d007      	beq.n	8001d3c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2140      	movs	r1, #64	; 0x40
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	23e0      	movs	r3, #224	; 0xe0
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d900      	bls.n	8001d4a <HAL_SPI_Receive+0x166>
 8001d48:	e069      	b.n	8001e1e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d4a:	e031      	b.n	8001db0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2201      	movs	r2, #1
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d117      	bne.n	8001d8a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	330c      	adds	r3, #12
 8001d60:	001a      	movs	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2246      	movs	r2, #70	; 0x46
 8001d7a:	5a9b      	ldrh	r3, [r3, r2]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b299      	uxth	r1, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2246      	movs	r2, #70	; 0x46
 8001d86:	5299      	strh	r1, [r3, r2]
 8001d88:	e012      	b.n	8001db0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d8a:	f7fe fd67 	bl	800085c <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d802      	bhi.n	8001da0 <HAL_SPI_Receive+0x1bc>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	d102      	bne.n	8001da6 <HAL_SPI_Receive+0x1c2>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8001da6:	2317      	movs	r3, #23
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	2203      	movs	r2, #3
 8001dac:	701a      	strb	r2, [r3, #0]
          goto error;
 8001dae:	e051      	b.n	8001e54 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2246      	movs	r2, #70	; 0x46
 8001db4:	5a9b      	ldrh	r3, [r3, r2]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1c7      	bne.n	8001d4c <HAL_SPI_Receive+0x168>
 8001dbc:	e035      	b.n	8001e2a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d115      	bne.n	8001df8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	b292      	uxth	r2, r2
 8001dd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	1c9a      	adds	r2, r3, #2
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2246      	movs	r2, #70	; 0x46
 8001de8:	5a9b      	ldrh	r3, [r3, r2]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b299      	uxth	r1, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2246      	movs	r2, #70	; 0x46
 8001df4:	5299      	strh	r1, [r3, r2]
 8001df6:	e012      	b.n	8001e1e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001df8:	f7fe fd30 	bl	800085c <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d802      	bhi.n	8001e0e <HAL_SPI_Receive+0x22a>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_SPI_Receive+0x230>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d104      	bne.n	8001e1e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8001e14:	2317      	movs	r3, #23
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2203      	movs	r2, #3
 8001e1a:	701a      	strb	r2, [r3, #0]
          goto error;
 8001e1c:	e01a      	b.n	8001e54 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2246      	movs	r2, #70	; 0x46
 8001e22:	5a9b      	ldrh	r3, [r3, r2]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1c9      	bne.n	8001dbe <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 fc41 	bl	80026b8 <SPI_EndRxTransaction>
 8001e36:	1e03      	subs	r3, r0, #0
 8001e38:	d002      	beq.n	8001e40 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8001e48:	2317      	movs	r3, #23
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e000      	b.n	8001e54 <HAL_SPI_Receive+0x270>
  }

error :
 8001e52:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	225d      	movs	r2, #93	; 0x5d
 8001e58:	2101      	movs	r1, #1
 8001e5a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	225c      	movs	r2, #92	; 0x5c
 8001e60:	2100      	movs	r1, #0
 8001e62:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001e64:	2317      	movs	r3, #23
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	781b      	ldrb	r3, [r3, #0]
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b007      	add	sp, #28
 8001e70:	bd90      	pop	{r4, r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	ffffefff 	.word	0xffffefff
 8001e78:	ffffbfff 	.word	0xffffbfff

08001e7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	001a      	movs	r2, r3
 8001e8a:	1cbb      	adds	r3, r7, #2
 8001e8c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e92:	2323      	movs	r3, #35	; 0x23
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	225c      	movs	r2, #92	; 0x5c
 8001e9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_SPI_TransmitReceive+0x2c>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e1b5      	b.n	8002214 <HAL_SPI_TransmitReceive+0x398>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	225c      	movs	r2, #92	; 0x5c
 8001eac:	2101      	movs	r1, #1
 8001eae:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eb0:	f7fe fcd4 	bl	800085c <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001eb8:	201b      	movs	r0, #27
 8001eba:	183b      	adds	r3, r7, r0
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	215d      	movs	r1, #93	; 0x5d
 8001ec0:	5c52      	ldrb	r2, [r2, r1]
 8001ec2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001eca:	2312      	movs	r3, #18
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	1cba      	adds	r2, r7, #2
 8001ed0:	8812      	ldrh	r2, [r2, #0]
 8001ed2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ed4:	183b      	adds	r3, r7, r0
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d011      	beq.n	8001f00 <HAL_SPI_TransmitReceive+0x84>
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	2382      	movs	r3, #130	; 0x82
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d107      	bne.n	8001ef6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <HAL_SPI_TransmitReceive+0x7a>
 8001eee:	183b      	adds	r3, r7, r0
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d004      	beq.n	8001f00 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001ef6:	2323      	movs	r3, #35	; 0x23
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	2202      	movs	r2, #2
 8001efc:	701a      	strb	r2, [r3, #0]
    goto error;
 8001efe:	e17e      	b.n	80021fe <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d006      	beq.n	8001f14 <HAL_SPI_TransmitReceive+0x98>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_SPI_TransmitReceive+0x98>
 8001f0c:	1cbb      	adds	r3, r7, #2
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d104      	bne.n	8001f1e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001f14:	2323      	movs	r3, #35	; 0x23
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001f1c:	e16f      	b.n	80021fe <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	225d      	movs	r2, #93	; 0x5d
 8001f22:	5c9b      	ldrb	r3, [r3, r2]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d003      	beq.n	8001f32 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	225d      	movs	r2, #93	; 0x5d
 8001f2e:	2105      	movs	r1, #5
 8001f30:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1cba      	adds	r2, r7, #2
 8001f42:	2146      	movs	r1, #70	; 0x46
 8001f44:	8812      	ldrh	r2, [r2, #0]
 8001f46:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1cba      	adds	r2, r7, #2
 8001f4c:	2144      	movs	r1, #68	; 0x44
 8001f4e:	8812      	ldrh	r2, [r2, #0]
 8001f50:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1cba      	adds	r2, r7, #2
 8001f5c:	8812      	ldrh	r2, [r2, #0]
 8001f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1cba      	adds	r2, r7, #2
 8001f64:	8812      	ldrh	r2, [r2, #0]
 8001f66:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	23e0      	movs	r3, #224	; 0xe0
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d908      	bls.n	8001f92 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	49a4      	ldr	r1, [pc, #656]	; (800221c <HAL_SPI_TransmitReceive+0x3a0>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	e008      	b.n	8001fa4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	0149      	lsls	r1, r1, #5
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b40      	cmp	r3, #64	; 0x40
 8001fb0:	d007      	beq.n	8001fc2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2140      	movs	r1, #64	; 0x40
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	23e0      	movs	r3, #224	; 0xe0
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d800      	bhi.n	8001fd0 <HAL_SPI_TransmitReceive+0x154>
 8001fce:	e07f      	b.n	80020d0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_SPI_TransmitReceive+0x168>
 8001fd8:	2312      	movs	r3, #18
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d000      	beq.n	8001fe4 <HAL_SPI_TransmitReceive+0x168>
 8001fe2:	e069      	b.n	80020b8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe8:	881a      	ldrh	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	1c9a      	adds	r2, r3, #2
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002008:	e056      	b.n	80020b8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2202      	movs	r2, #2
 8002012:	4013      	ands	r3, r2
 8002014:	2b02      	cmp	r3, #2
 8002016:	d11b      	bne.n	8002050 <HAL_SPI_TransmitReceive+0x1d4>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d016      	beq.n	8002050 <HAL_SPI_TransmitReceive+0x1d4>
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	2b01      	cmp	r3, #1
 8002026:	d113      	bne.n	8002050 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202c:	881a      	ldrh	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	1c9a      	adds	r2, r3, #2
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2201      	movs	r2, #1
 8002058:	4013      	ands	r3, r2
 800205a:	2b01      	cmp	r3, #1
 800205c:	d11c      	bne.n	8002098 <HAL_SPI_TransmitReceive+0x21c>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2246      	movs	r2, #70	; 0x46
 8002062:	5a9b      	ldrh	r3, [r3, r2]
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d016      	beq.n	8002098 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	b292      	uxth	r2, r2
 8002076:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	1c9a      	adds	r2, r3, #2
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2246      	movs	r2, #70	; 0x46
 8002086:	5a9b      	ldrh	r3, [r3, r2]
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b299      	uxth	r1, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2246      	movs	r2, #70	; 0x46
 8002092:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002094:	2301      	movs	r3, #1
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002098:	f7fe fbe0 	bl	800085c <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d807      	bhi.n	80020b8 <HAL_SPI_TransmitReceive+0x23c>
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	3301      	adds	r3, #1
 80020ac:	d004      	beq.n	80020b8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80020ae:	2323      	movs	r3, #35	; 0x23
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2203      	movs	r2, #3
 80020b4:	701a      	strb	r2, [r3, #0]
        goto error;
 80020b6:	e0a2      	b.n	80021fe <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1a3      	bne.n	800200a <HAL_SPI_TransmitReceive+0x18e>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2246      	movs	r2, #70	; 0x46
 80020c6:	5a9b      	ldrh	r3, [r3, r2]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d19d      	bne.n	800200a <HAL_SPI_TransmitReceive+0x18e>
 80020ce:	e085      	b.n	80021dc <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_SPI_TransmitReceive+0x268>
 80020d8:	2312      	movs	r3, #18
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d000      	beq.n	80020e4 <HAL_SPI_TransmitReceive+0x268>
 80020e2:	e070      	b.n	80021c6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	330c      	adds	r3, #12
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800210a:	e05c      	b.n	80021c6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d11c      	bne.n	8002154 <HAL_SPI_TransmitReceive+0x2d8>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d017      	beq.n	8002154 <HAL_SPI_TransmitReceive+0x2d8>
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	2b01      	cmp	r3, #1
 8002128:	d114      	bne.n	8002154 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	330c      	adds	r3, #12
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2201      	movs	r2, #1
 800215c:	4013      	ands	r3, r2
 800215e:	2b01      	cmp	r3, #1
 8002160:	d11e      	bne.n	80021a0 <HAL_SPI_TransmitReceive+0x324>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2246      	movs	r2, #70	; 0x46
 8002166:	5a9b      	ldrh	r3, [r3, r2]
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d018      	beq.n	80021a0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	330c      	adds	r3, #12
 8002174:	001a      	movs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2246      	movs	r2, #70	; 0x46
 800218e:	5a9b      	ldrh	r3, [r3, r2]
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b299      	uxth	r1, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2246      	movs	r2, #70	; 0x46
 800219a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800219c:	2301      	movs	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021a0:	f7fe fb5c 	bl	800085c <HAL_GetTick>
 80021a4:	0002      	movs	r2, r0
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d802      	bhi.n	80021b6 <HAL_SPI_TransmitReceive+0x33a>
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	3301      	adds	r3, #1
 80021b4:	d102      	bne.n	80021bc <HAL_SPI_TransmitReceive+0x340>
 80021b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d104      	bne.n	80021c6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80021bc:	2323      	movs	r3, #35	; 0x23
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2203      	movs	r2, #3
 80021c2:	701a      	strb	r2, [r3, #0]
        goto error;
 80021c4:	e01b      	b.n	80021fe <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d19d      	bne.n	800210c <HAL_SPI_TransmitReceive+0x290>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2246      	movs	r2, #70	; 0x46
 80021d4:	5a9b      	ldrh	r3, [r3, r2]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d197      	bne.n	800210c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 fac6 	bl	8002774 <SPI_EndRxTxTransaction>
 80021e8:	1e03      	subs	r3, r0, #0
 80021ea:	d007      	beq.n	80021fc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80021ec:	2323      	movs	r3, #35	; 0x23
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2220      	movs	r2, #32
 80021f8:	661a      	str	r2, [r3, #96]	; 0x60
 80021fa:	e000      	b.n	80021fe <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80021fc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	225d      	movs	r2, #93	; 0x5d
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	225c      	movs	r2, #92	; 0x5c
 800220a:	2100      	movs	r1, #0
 800220c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800220e:	2323      	movs	r3, #35	; 0x23
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	781b      	ldrb	r3, [r3, #0]
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b00a      	add	sp, #40	; 0x28
 800221a:	bd80      	pop	{r7, pc}
 800221c:	ffffefff 	.word	0xffffefff

08002220 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	099b      	lsrs	r3, r3, #6
 800223c:	001a      	movs	r2, r3
 800223e:	2301      	movs	r3, #1
 8002240:	4013      	ands	r3, r2
 8002242:	d10f      	bne.n	8002264 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2201      	movs	r2, #1
 8002248:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800224a:	d00b      	beq.n	8002264 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	099b      	lsrs	r3, r3, #6
 8002250:	001a      	movs	r2, r3
 8002252:	2301      	movs	r3, #1
 8002254:	4013      	ands	r3, r2
 8002256:	d005      	beq.n	8002264 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	0010      	movs	r0, r2
 8002260:	4798      	blx	r3
    return;
 8002262:	e0d5      	b.n	8002410 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	085b      	lsrs	r3, r3, #1
 8002268:	001a      	movs	r2, r3
 800226a:	2301      	movs	r3, #1
 800226c:	4013      	ands	r3, r2
 800226e:	d00b      	beq.n	8002288 <HAL_SPI_IRQHandler+0x68>
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	09db      	lsrs	r3, r3, #7
 8002274:	001a      	movs	r2, r3
 8002276:	2301      	movs	r3, #1
 8002278:	4013      	ands	r3, r2
 800227a:	d005      	beq.n	8002288 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	0010      	movs	r0, r2
 8002284:	4798      	blx	r3
    return;
 8002286:	e0c3      	b.n	8002410 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	001a      	movs	r2, r3
 800228e:	2301      	movs	r3, #1
 8002290:	4013      	ands	r3, r2
 8002292:	d10c      	bne.n	80022ae <HAL_SPI_IRQHandler+0x8e>
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	001a      	movs	r2, r3
 800229a:	2301      	movs	r3, #1
 800229c:	4013      	ands	r3, r2
 800229e:	d106      	bne.n	80022ae <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	001a      	movs	r2, r3
 80022a6:	2301      	movs	r3, #1
 80022a8:	4013      	ands	r3, r2
 80022aa:	d100      	bne.n	80022ae <HAL_SPI_IRQHandler+0x8e>
 80022ac:	e0b0      	b.n	8002410 <HAL_SPI_IRQHandler+0x1f0>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	001a      	movs	r2, r3
 80022b4:	2301      	movs	r3, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	d100      	bne.n	80022bc <HAL_SPI_IRQHandler+0x9c>
 80022ba:	e0a9      	b.n	8002410 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	099b      	lsrs	r3, r3, #6
 80022c0:	001a      	movs	r2, r3
 80022c2:	2301      	movs	r3, #1
 80022c4:	4013      	ands	r3, r2
 80022c6:	d023      	beq.n	8002310 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	225d      	movs	r2, #93	; 0x5d
 80022cc:	5c9b      	ldrb	r3, [r3, r2]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d011      	beq.n	80022f8 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d8:	2204      	movs	r2, #4
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	e00b      	b.n	8002310 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
        return;
 800230e:	e07f      	b.n	8002410 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	001a      	movs	r2, r3
 8002316:	2301      	movs	r3, #1
 8002318:	4013      	ands	r3, r2
 800231a:	d014      	beq.n	8002346 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002320:	2201      	movs	r2, #1
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2140      	movs	r1, #64	; 0x40
 8002340:	438a      	bics	r2, r1
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	001a      	movs	r2, r3
 800234c:	2301      	movs	r3, #1
 800234e:	4013      	ands	r3, r2
 8002350:	d00c      	beq.n	800236c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	2208      	movs	r2, #8
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	2b00      	cmp	r3, #0
 8002372:	d04c      	beq.n	800240e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	21e0      	movs	r1, #224	; 0xe0
 8002380:	438a      	bics	r2, r1
 8002382:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	225d      	movs	r2, #93	; 0x5d
 8002388:	2101      	movs	r1, #1
 800238a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2202      	movs	r2, #2
 8002390:	4013      	ands	r3, r2
 8002392:	d103      	bne.n	800239c <HAL_SPI_IRQHandler+0x17c>
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2201      	movs	r2, #1
 8002398:	4013      	ands	r3, r2
 800239a:	d032      	beq.n	8002402 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2103      	movs	r1, #3
 80023a8:	438a      	bics	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d010      	beq.n	80023d6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	4a17      	ldr	r2, [pc, #92]	; (8002418 <HAL_SPI_IRQHandler+0x1f8>)
 80023ba:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7fe fb7b 	bl	8000abc <HAL_DMA_Abort_IT>
 80023c6:	1e03      	subs	r3, r0, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ce:	2240      	movs	r2, #64	; 0x40
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d016      	beq.n	800240c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <HAL_SPI_IRQHandler+0x1f8>)
 80023e4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	0018      	movs	r0, r3
 80023ec:	f7fe fb66 	bl	8000abc <HAL_DMA_Abort_IT>
 80023f0:	1e03      	subs	r3, r0, #0
 80023f2:	d00b      	beq.n	800240c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f8:	2240      	movs	r2, #64	; 0x40
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002400:	e004      	b.n	800240c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	0018      	movs	r0, r3
 8002406:	f000 f809 	bl	800241c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800240a:	e000      	b.n	800240e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800240c:	46c0      	nop			; (mov r8, r8)
    return;
 800240e:	46c0      	nop			; (mov r8, r8)
  }
}
 8002410:	46bd      	mov	sp, r7
 8002412:	b008      	add	sp, #32
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	0800242d 	.word	0x0800242d

0800241c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}

0800242c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2246      	movs	r2, #70	; 0x46
 800243e:	2100      	movs	r1, #0
 8002440:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	0018      	movs	r0, r3
 800244c:	f7ff ffe6 	bl	800241c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b004      	add	sp, #16
 8002456:	bd80      	pop	{r7, pc}

08002458 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002468:	f7fe f9f8 	bl	800085c <HAL_GetTick>
 800246c:	0002      	movs	r2, r0
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	18d3      	adds	r3, r2, r3
 8002476:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002478:	f7fe f9f0 	bl	800085c <HAL_GetTick>
 800247c:	0003      	movs	r3, r0
 800247e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002480:	4b3a      	ldr	r3, [pc, #232]	; (800256c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	015b      	lsls	r3, r3, #5
 8002486:	0d1b      	lsrs	r3, r3, #20
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	4353      	muls	r3, r2
 800248c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800248e:	e058      	b.n	8002542 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	d055      	beq.n	8002542 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002496:	f7fe f9e1 	bl	800085c <HAL_GetTick>
 800249a:	0002      	movs	r2, r0
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d902      	bls.n	80024ac <SPI_WaitFlagStateUntilTimeout+0x54>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d142      	bne.n	8002532 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	21e0      	movs	r1, #224	; 0xe0
 80024b8:	438a      	bics	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	2382      	movs	r3, #130	; 0x82
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d113      	bne.n	80024f0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d005      	beq.n	80024e0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2140      	movs	r1, #64	; 0x40
 80024ec:	438a      	bics	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	019b      	lsls	r3, r3, #6
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d110      	bne.n	800251e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	491a      	ldr	r1, [pc, #104]	; (8002570 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002508:	400a      	ands	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2180      	movs	r1, #128	; 0x80
 8002518:	0189      	lsls	r1, r1, #6
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	225d      	movs	r2, #93	; 0x5d
 8002522:	2101      	movs	r1, #1
 8002524:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	225c      	movs	r2, #92	; 0x5c
 800252a:	2100      	movs	r1, #0
 800252c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e017      	b.n	8002562 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3b01      	subs	r3, #1
 8002540:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	4013      	ands	r3, r2
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	425a      	negs	r2, r3
 8002552:	4153      	adcs	r3, r2
 8002554:	b2db      	uxtb	r3, r3
 8002556:	001a      	movs	r2, r3
 8002558:	1dfb      	adds	r3, r7, #7
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d197      	bne.n	8002490 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b008      	add	sp, #32
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	20000000 	.word	0x20000000
 8002570:	ffffdfff 	.word	0xffffdfff

08002574 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002582:	2317      	movs	r3, #23
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800258a:	f7fe f967 	bl	800085c <HAL_GetTick>
 800258e:	0002      	movs	r2, r0
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	18d3      	adds	r3, r2, r3
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800259a:	f7fe f95f 	bl	800085c <HAL_GetTick>
 800259e:	0003      	movs	r3, r0
 80025a0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	330c      	adds	r3, #12
 80025a8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80025aa:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	0013      	movs	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	189b      	adds	r3, r3, r2
 80025b4:	00da      	lsls	r2, r3, #3
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	0d1b      	lsrs	r3, r3, #20
 80025ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025bc:	4353      	muls	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80025c0:	e068      	b.n	8002694 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	23c0      	movs	r3, #192	; 0xc0
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d10a      	bne.n	80025e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d107      	bne.n	80025e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	2117      	movs	r1, #23
 80025da:	187b      	adds	r3, r7, r1
 80025dc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	3301      	adds	r3, #1
 80025e6:	d055      	beq.n	8002694 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025e8:	f7fe f938 	bl	800085c <HAL_GetTick>
 80025ec:	0002      	movs	r2, r0
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d902      	bls.n	80025fe <SPI_WaitFifoStateUntilTimeout+0x8a>
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d142      	bne.n	8002684 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	21e0      	movs	r1, #224	; 0xe0
 800260a:	438a      	bics	r2, r1
 800260c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	2382      	movs	r3, #130	; 0x82
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	429a      	cmp	r2, r3
 8002618:	d113      	bne.n	8002642 <SPI_WaitFifoStateUntilTimeout+0xce>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	429a      	cmp	r2, r3
 8002624:	d005      	beq.n	8002632 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	429a      	cmp	r2, r3
 8002630:	d107      	bne.n	8002642 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2140      	movs	r1, #64	; 0x40
 800263e:	438a      	bics	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	019b      	lsls	r3, r3, #6
 800264a:	429a      	cmp	r2, r3
 800264c:	d110      	bne.n	8002670 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4916      	ldr	r1, [pc, #88]	; (80026b4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800265a:	400a      	ands	r2, r1
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	0189      	lsls	r1, r1, #6
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	225d      	movs	r2, #93	; 0x5d
 8002674:	2101      	movs	r1, #1
 8002676:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	225c      	movs	r2, #92	; 0x5c
 800267c:	2100      	movs	r1, #0
 800267e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e010      	b.n	80026a6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	3b01      	subs	r3, #1
 8002692:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d18e      	bne.n	80025c2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b00a      	add	sp, #40	; 0x28
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	20000000 	.word	0x20000000
 80026b4:	ffffdfff 	.word	0xffffdfff

080026b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	2382      	movs	r3, #130	; 0x82
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d113      	bne.n	80026f8 <SPI_EndRxTransaction+0x40>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	429a      	cmp	r2, r3
 80026da:	d005      	beq.n	80026e8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2140      	movs	r1, #64	; 0x40
 80026f4:	438a      	bics	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	0013      	movs	r3, r2
 8002702:	2200      	movs	r2, #0
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	f7ff fea7 	bl	8002458 <SPI_WaitFlagStateUntilTimeout>
 800270a:	1e03      	subs	r3, r0, #0
 800270c:	d007      	beq.n	800271e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002712:	2220      	movs	r2, #32
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e026      	b.n	800276c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	2382      	movs	r3, #130	; 0x82
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	429a      	cmp	r2, r3
 8002728:	d11f      	bne.n	800276a <SPI_EndRxTransaction+0xb2>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	429a      	cmp	r2, r3
 8002734:	d005      	beq.n	8002742 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	429a      	cmp	r2, r3
 8002740:	d113      	bne.n	800276a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	23c0      	movs	r3, #192	; 0xc0
 8002746:	00d9      	lsls	r1, r3, #3
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	0013      	movs	r3, r2
 8002750:	2200      	movs	r2, #0
 8002752:	f7ff ff0f 	bl	8002574 <SPI_WaitFifoStateUntilTimeout>
 8002756:	1e03      	subs	r3, r0, #0
 8002758:	d007      	beq.n	800276a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275e:	2220      	movs	r2, #32
 8002760:	431a      	orrs	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e000      	b.n	800276c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b004      	add	sp, #16
 8002772:	bd80      	pop	{r7, pc}

08002774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	23c0      	movs	r3, #192	; 0xc0
 8002784:	0159      	lsls	r1, r3, #5
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	0013      	movs	r3, r2
 800278e:	2200      	movs	r2, #0
 8002790:	f7ff fef0 	bl	8002574 <SPI_WaitFifoStateUntilTimeout>
 8002794:	1e03      	subs	r3, r0, #0
 8002796:	d007      	beq.n	80027a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279c:	2220      	movs	r2, #32
 800279e:	431a      	orrs	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e027      	b.n	80027f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	0013      	movs	r3, r2
 80027b2:	2200      	movs	r2, #0
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	f7ff fe4f 	bl	8002458 <SPI_WaitFlagStateUntilTimeout>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d007      	beq.n	80027ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	2220      	movs	r2, #32
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e014      	b.n	80027f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	23c0      	movs	r3, #192	; 0xc0
 80027d2:	00d9      	lsls	r1, r3, #3
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	0013      	movs	r3, r2
 80027dc:	2200      	movs	r2, #0
 80027de:	f7ff fec9 	bl	8002574 <SPI_WaitFifoStateUntilTimeout>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d007      	beq.n	80027f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ea:	2220      	movs	r2, #32
 80027ec:	431a      	orrs	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e000      	b.n	80027f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b004      	add	sp, #16
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e044      	b.n	800289c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002816:	2b00      	cmp	r3, #0
 8002818:	d107      	bne.n	800282a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2274      	movs	r2, #116	; 0x74
 800281e:	2100      	movs	r1, #0
 8002820:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	0018      	movs	r0, r3
 8002826:	f7fd ff11 	bl	800064c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2224      	movs	r2, #36	; 0x24
 800282e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2101      	movs	r1, #1
 800283c:	438a      	bics	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f8da 	bl	80029fc <UART_SetConfig>
 8002848:	0003      	movs	r3, r0
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e024      	b.n	800289c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	0018      	movs	r0, r3
 800285e:	f000 fa0d 	bl	8002c7c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	490d      	ldr	r1, [pc, #52]	; (80028a4 <HAL_UART_Init+0xa4>)
 800286e:	400a      	ands	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	212a      	movs	r1, #42	; 0x2a
 800287e:	438a      	bics	r2, r1
 8002880:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	0018      	movs	r0, r3
 8002896:	f000 faa5 	bl	8002de4 <UART_CheckIdleState>
 800289a:	0003      	movs	r3, r0
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b002      	add	sp, #8
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	ffffb7ff 	.word	0xffffb7ff

080028a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	1dbb      	adds	r3, r7, #6
 80028b6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d000      	beq.n	80028c2 <HAL_UART_Transmit+0x1a>
 80028c0:	e096      	b.n	80029f0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_UART_Transmit+0x28>
 80028c8:	1dbb      	adds	r3, r7, #6
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e08e      	b.n	80029f2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	015b      	lsls	r3, r3, #5
 80028dc:	429a      	cmp	r2, r3
 80028de:	d109      	bne.n	80028f4 <HAL_UART_Transmit+0x4c>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2201      	movs	r2, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	d001      	beq.n	80028f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e07e      	b.n	80029f2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2274      	movs	r2, #116	; 0x74
 80028f8:	5c9b      	ldrb	r3, [r3, r2]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Transmit+0x5a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e077      	b.n	80029f2 <HAL_UART_Transmit+0x14a>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2274      	movs	r2, #116	; 0x74
 8002906:	2101      	movs	r1, #1
 8002908:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2280      	movs	r2, #128	; 0x80
 800290e:	2100      	movs	r1, #0
 8002910:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2221      	movs	r2, #33	; 0x21
 8002916:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002918:	f7fd ffa0 	bl	800085c <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1dba      	adds	r2, r7, #6
 8002924:	2150      	movs	r1, #80	; 0x50
 8002926:	8812      	ldrh	r2, [r2, #0]
 8002928:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1dba      	adds	r2, r7, #6
 800292e:	2152      	movs	r1, #82	; 0x52
 8002930:	8812      	ldrh	r2, [r2, #0]
 8002932:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	015b      	lsls	r3, r3, #5
 800293c:	429a      	cmp	r2, r3
 800293e:	d108      	bne.n	8002952 <HAL_UART_Transmit+0xaa>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d104      	bne.n	8002952 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	e003      	b.n	800295a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2274      	movs	r2, #116	; 0x74
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002962:	e02d      	b.n	80029c0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	0013      	movs	r3, r2
 800296e:	2200      	movs	r2, #0
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	f000 fa7f 	bl	8002e74 <UART_WaitOnFlagUntilTimeout>
 8002976:	1e03      	subs	r3, r0, #0
 8002978:	d001      	beq.n	800297e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e039      	b.n	80029f2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	881a      	ldrh	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	05d2      	lsls	r2, r2, #23
 800298e:	0dd2      	lsrs	r2, r2, #23
 8002990:	b292      	uxth	r2, r2
 8002992:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	3302      	adds	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e008      	b.n	80029ae <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	b292      	uxth	r2, r2
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	3301      	adds	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2252      	movs	r2, #82	; 0x52
 80029b2:	5a9b      	ldrh	r3, [r3, r2]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b299      	uxth	r1, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2252      	movs	r2, #82	; 0x52
 80029be:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2252      	movs	r2, #82	; 0x52
 80029c4:	5a9b      	ldrh	r3, [r3, r2]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1cb      	bne.n	8002964 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	0013      	movs	r3, r2
 80029d6:	2200      	movs	r2, #0
 80029d8:	2140      	movs	r1, #64	; 0x40
 80029da:	f000 fa4b 	bl	8002e74 <UART_WaitOnFlagUntilTimeout>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e005      	b.n	80029f2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
  }
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b008      	add	sp, #32
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a04:	231e      	movs	r3, #30
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a8d      	ldr	r2, [pc, #564]	; (8002c60 <UART_SetConfig+0x264>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a88      	ldr	r2, [pc, #544]	; (8002c64 <UART_SetConfig+0x268>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a7f      	ldr	r2, [pc, #508]	; (8002c68 <UART_SetConfig+0x26c>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7b      	ldr	r2, [pc, #492]	; (8002c6c <UART_SetConfig+0x270>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d127      	bne.n	8002ad2 <UART_SetConfig+0xd6>
 8002a82:	4b7b      	ldr	r3, [pc, #492]	; (8002c70 <UART_SetConfig+0x274>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	2203      	movs	r2, #3
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d00d      	beq.n	8002aaa <UART_SetConfig+0xae>
 8002a8e:	d81b      	bhi.n	8002ac8 <UART_SetConfig+0xcc>
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d014      	beq.n	8002abe <UART_SetConfig+0xc2>
 8002a94:	d818      	bhi.n	8002ac8 <UART_SetConfig+0xcc>
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <UART_SetConfig+0xa4>
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d00a      	beq.n	8002ab4 <UART_SetConfig+0xb8>
 8002a9e:	e013      	b.n	8002ac8 <UART_SetConfig+0xcc>
 8002aa0:	231f      	movs	r3, #31
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e021      	b.n	8002aee <UART_SetConfig+0xf2>
 8002aaa:	231f      	movs	r3, #31
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e01c      	b.n	8002aee <UART_SetConfig+0xf2>
 8002ab4:	231f      	movs	r3, #31
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2204      	movs	r2, #4
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e017      	b.n	8002aee <UART_SetConfig+0xf2>
 8002abe:	231f      	movs	r3, #31
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e012      	b.n	8002aee <UART_SetConfig+0xf2>
 8002ac8:	231f      	movs	r3, #31
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	2210      	movs	r2, #16
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	e00d      	b.n	8002aee <UART_SetConfig+0xf2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a67      	ldr	r2, [pc, #412]	; (8002c74 <UART_SetConfig+0x278>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d104      	bne.n	8002ae6 <UART_SetConfig+0xea>
 8002adc:	231f      	movs	r3, #31
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e003      	b.n	8002aee <UART_SetConfig+0xf2>
 8002ae6:	231f      	movs	r3, #31
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	2210      	movs	r2, #16
 8002aec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d15d      	bne.n	8002bb6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002afa:	231f      	movs	r3, #31
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d015      	beq.n	8002b30 <UART_SetConfig+0x134>
 8002b04:	dc18      	bgt.n	8002b38 <UART_SetConfig+0x13c>
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d00d      	beq.n	8002b26 <UART_SetConfig+0x12a>
 8002b0a:	dc15      	bgt.n	8002b38 <UART_SetConfig+0x13c>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <UART_SetConfig+0x11a>
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d005      	beq.n	8002b20 <UART_SetConfig+0x124>
 8002b14:	e010      	b.n	8002b38 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b16:	f7fe feb9 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	61bb      	str	r3, [r7, #24]
        break;
 8002b1e:	e012      	b.n	8002b46 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b20:	4b55      	ldr	r3, [pc, #340]	; (8002c78 <UART_SetConfig+0x27c>)
 8002b22:	61bb      	str	r3, [r7, #24]
        break;
 8002b24:	e00f      	b.n	8002b46 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b26:	f7fe fe43 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	61bb      	str	r3, [r7, #24]
        break;
 8002b2e:	e00a      	b.n	8002b46 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	61bb      	str	r3, [r7, #24]
        break;
 8002b36:	e006      	b.n	8002b46 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b3c:	231e      	movs	r3, #30
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
        break;
 8002b44:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d100      	bne.n	8002b4e <UART_SetConfig+0x152>
 8002b4c:	e07b      	b.n	8002c46 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	005a      	lsls	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	18d2      	adds	r2, r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	0019      	movs	r1, r3
 8002b60:	0010      	movs	r0, r2
 8002b62:	f7fd fad1 	bl	8000108 <__udivsi3>
 8002b66:	0003      	movs	r3, r0
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	d91c      	bls.n	8002bac <UART_SetConfig+0x1b0>
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	025b      	lsls	r3, r3, #9
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d217      	bcs.n	8002bac <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	200e      	movs	r0, #14
 8002b82:	183b      	adds	r3, r7, r0
 8002b84:	210f      	movs	r1, #15
 8002b86:	438a      	bics	r2, r1
 8002b88:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2207      	movs	r2, #7
 8002b92:	4013      	ands	r3, r2
 8002b94:	b299      	uxth	r1, r3
 8002b96:	183b      	adds	r3, r7, r0
 8002b98:	183a      	adds	r2, r7, r0
 8002b9a:	8812      	ldrh	r2, [r2, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	183a      	adds	r2, r7, r0
 8002ba6:	8812      	ldrh	r2, [r2, #0]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	e04c      	b.n	8002c46 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002bac:	231e      	movs	r3, #30
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e047      	b.n	8002c46 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bb6:	231f      	movs	r3, #31
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d015      	beq.n	8002bec <UART_SetConfig+0x1f0>
 8002bc0:	dc18      	bgt.n	8002bf4 <UART_SetConfig+0x1f8>
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d00d      	beq.n	8002be2 <UART_SetConfig+0x1e6>
 8002bc6:	dc15      	bgt.n	8002bf4 <UART_SetConfig+0x1f8>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <UART_SetConfig+0x1d6>
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d005      	beq.n	8002bdc <UART_SetConfig+0x1e0>
 8002bd0:	e010      	b.n	8002bf4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bd2:	f7fe fe5b 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	61bb      	str	r3, [r7, #24]
        break;
 8002bda:	e012      	b.n	8002c02 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bdc:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <UART_SetConfig+0x27c>)
 8002bde:	61bb      	str	r3, [r7, #24]
        break;
 8002be0:	e00f      	b.n	8002c02 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002be2:	f7fe fde5 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 8002be6:	0003      	movs	r3, r0
 8002be8:	61bb      	str	r3, [r7, #24]
        break;
 8002bea:	e00a      	b.n	8002c02 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	61bb      	str	r3, [r7, #24]
        break;
 8002bf2:	e006      	b.n	8002c02 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bf8:	231e      	movs	r3, #30
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
        break;
 8002c00:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01e      	beq.n	8002c46 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	085a      	lsrs	r2, r3, #1
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	18d2      	adds	r2, r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	0019      	movs	r1, r3
 8002c18:	0010      	movs	r0, r2
 8002c1a:	f7fd fa75 	bl	8000108 <__udivsi3>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b0f      	cmp	r3, #15
 8002c28:	d909      	bls.n	8002c3e <UART_SetConfig+0x242>
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	025b      	lsls	r3, r3, #9
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d204      	bcs.n	8002c3e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	60da      	str	r2, [r3, #12]
 8002c3c:	e003      	b.n	8002c46 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002c3e:	231e      	movs	r3, #30
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c52:	231e      	movs	r3, #30
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	781b      	ldrb	r3, [r3, #0]
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b008      	add	sp, #32
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	ffff69f3 	.word	0xffff69f3
 8002c64:	ffffcfff 	.word	0xffffcfff
 8002c68:	fffff4ff 	.word	0xfffff4ff
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40004400 	.word	0x40004400
 8002c78:	007a1200 	.word	0x007a1200

08002c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d00b      	beq.n	8002ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a4a      	ldr	r2, [pc, #296]	; (8002dc0 <UART_AdvFeatureConfig+0x144>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	2202      	movs	r2, #2
 8002cac:	4013      	ands	r3, r2
 8002cae:	d00b      	beq.n	8002cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a43      	ldr	r2, [pc, #268]	; (8002dc4 <UART_AdvFeatureConfig+0x148>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2204      	movs	r2, #4
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d00b      	beq.n	8002cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a3b      	ldr	r2, [pc, #236]	; (8002dc8 <UART_AdvFeatureConfig+0x14c>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	2208      	movs	r2, #8
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d00b      	beq.n	8002d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4a34      	ldr	r2, [pc, #208]	; (8002dcc <UART_AdvFeatureConfig+0x150>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	0019      	movs	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2210      	movs	r2, #16
 8002d12:	4013      	ands	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a2c      	ldr	r2, [pc, #176]	; (8002dd0 <UART_AdvFeatureConfig+0x154>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	2220      	movs	r2, #32
 8002d34:	4013      	ands	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <UART_AdvFeatureConfig+0x158>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	2240      	movs	r2, #64	; 0x40
 8002d56:	4013      	ands	r3, r2
 8002d58:	d01d      	beq.n	8002d96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <UART_AdvFeatureConfig+0x15c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	035b      	lsls	r3, r3, #13
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d10b      	bne.n	8002d96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <UART_AdvFeatureConfig+0x160>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	0019      	movs	r1, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d00b      	beq.n	8002db8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <UART_AdvFeatureConfig+0x164>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	605a      	str	r2, [r3, #4]
  }
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	fffdffff 	.word	0xfffdffff
 8002dc4:	fffeffff 	.word	0xfffeffff
 8002dc8:	fffbffff 	.word	0xfffbffff
 8002dcc:	ffff7fff 	.word	0xffff7fff
 8002dd0:	ffffefff 	.word	0xffffefff
 8002dd4:	ffffdfff 	.word	0xffffdfff
 8002dd8:	ffefffff 	.word	0xffefffff
 8002ddc:	ff9fffff 	.word	0xff9fffff
 8002de0:	fff7ffff 	.word	0xfff7ffff

08002de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	2100      	movs	r1, #0
 8002df2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002df4:	f7fd fd32 	bl	800085c <HAL_GetTick>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2208      	movs	r2, #8
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d10c      	bne.n	8002e24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	0391      	lsls	r1, r2, #14
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <UART_CheckIdleState+0x8c>)
 8002e14:	9200      	str	r2, [sp, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f000 f82c 	bl	8002e74 <UART_WaitOnFlagUntilTimeout>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d001      	beq.n	8002e24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e021      	b.n	8002e68 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d10c      	bne.n	8002e4c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	03d1      	lsls	r1, r2, #15
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <UART_CheckIdleState+0x8c>)
 8002e3c:	9200      	str	r2, [sp, #0]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f000 f818 	bl	8002e74 <UART_WaitOnFlagUntilTimeout>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d001      	beq.n	8002e4c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e00d      	b.n	8002e68 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2274      	movs	r2, #116	; 0x74
 8002e62:	2100      	movs	r1, #0
 8002e64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	0018      	movs	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b004      	add	sp, #16
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	01ffffff 	.word	0x01ffffff

08002e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b094      	sub	sp, #80	; 0x50
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	1dfb      	adds	r3, r7, #7
 8002e82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e84:	e0a3      	b.n	8002fce <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e88:	3301      	adds	r3, #1
 8002e8a:	d100      	bne.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x1a>
 8002e8c:	e09f      	b.n	8002fce <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fd fce5 	bl	800085c <HAL_GetTick>
 8002e92:	0002      	movs	r2, r0
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d13d      	bne.n	8002f20 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eac:	647b      	str	r3, [r7, #68]	; 0x44
 8002eae:	2301      	movs	r3, #1
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	f383 8810 	msr	PRIMASK, r3
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	494c      	ldr	r1, [pc, #304]	; (8002ff8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	f383 8810 	msr	PRIMASK, r3
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ede:	643b      	str	r3, [r7, #64]	; 0x40
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	f383 8810 	msr	PRIMASK, r3
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	438a      	bics	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f02:	f383 8810 	msr	PRIMASK, r3
}
 8002f06:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2220      	movs	r2, #32
 8002f12:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2274      	movs	r2, #116	; 0x74
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e067      	b.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2204      	movs	r2, #4
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d050      	beq.n	8002fce <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	401a      	ands	r2, r3
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d146      	bne.n	8002fce <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4e:	613b      	str	r3, [r7, #16]
  return(result);
 8002f50:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f54:	2301      	movs	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4923      	ldr	r1, [pc, #140]	; (8002ff8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f80:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f82:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f86:	2301      	movs	r3, #1
 8002f88:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f383 8810 	msr	PRIMASK, r3
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	438a      	bics	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	f383 8810 	msr	PRIMASK, r3
}
 8002fac:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	2120      	movs	r1, #32
 8002fc0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2274      	movs	r2, #116	; 0x74
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e010      	b.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	425a      	negs	r2, r3
 8002fde:	4153      	adcs	r3, r2
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	1dfb      	adds	r3, r7, #7
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d100      	bne.n	8002fee <UART_WaitOnFlagUntilTimeout+0x17a>
 8002fec:	e74b      	b.n	8002e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b014      	add	sp, #80	; 0x50
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	fffffe5f 	.word	0xfffffe5f

08002ffc <__libc_init_array>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	2600      	movs	r6, #0
 8003000:	4d0c      	ldr	r5, [pc, #48]	; (8003034 <__libc_init_array+0x38>)
 8003002:	4c0d      	ldr	r4, [pc, #52]	; (8003038 <__libc_init_array+0x3c>)
 8003004:	1b64      	subs	r4, r4, r5
 8003006:	10a4      	asrs	r4, r4, #2
 8003008:	42a6      	cmp	r6, r4
 800300a:	d109      	bne.n	8003020 <__libc_init_array+0x24>
 800300c:	2600      	movs	r6, #0
 800300e:	f000 f821 	bl	8003054 <_init>
 8003012:	4d0a      	ldr	r5, [pc, #40]	; (800303c <__libc_init_array+0x40>)
 8003014:	4c0a      	ldr	r4, [pc, #40]	; (8003040 <__libc_init_array+0x44>)
 8003016:	1b64      	subs	r4, r4, r5
 8003018:	10a4      	asrs	r4, r4, #2
 800301a:	42a6      	cmp	r6, r4
 800301c:	d105      	bne.n	800302a <__libc_init_array+0x2e>
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	00b3      	lsls	r3, r6, #2
 8003022:	58eb      	ldr	r3, [r5, r3]
 8003024:	4798      	blx	r3
 8003026:	3601      	adds	r6, #1
 8003028:	e7ee      	b.n	8003008 <__libc_init_array+0xc>
 800302a:	00b3      	lsls	r3, r6, #2
 800302c:	58eb      	ldr	r3, [r5, r3]
 800302e:	4798      	blx	r3
 8003030:	3601      	adds	r6, #1
 8003032:	e7f2      	b.n	800301a <__libc_init_array+0x1e>
 8003034:	080030a4 	.word	0x080030a4
 8003038:	080030a4 	.word	0x080030a4
 800303c:	080030a4 	.word	0x080030a4
 8003040:	080030a8 	.word	0x080030a8

08003044 <memset>:
 8003044:	0003      	movs	r3, r0
 8003046:	1882      	adds	r2, r0, r2
 8003048:	4293      	cmp	r3, r2
 800304a:	d100      	bne.n	800304e <memset+0xa>
 800304c:	4770      	bx	lr
 800304e:	7019      	strb	r1, [r3, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	e7f9      	b.n	8003048 <memset+0x4>

08003054 <_init>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305a:	bc08      	pop	{r3}
 800305c:	469e      	mov	lr, r3
 800305e:	4770      	bx	lr

08003060 <_fini>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr
